circuit PEKernelCtrl :
  module PEKernelCtrl :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip Mode : UInt<3>, flip Schedule : UInt<24>, KernelAddr : UInt<10>, KernelBankIdx : UInt<4>, KernelBufRW : UInt<1>, KernelBufEn : UInt<1>, KernelIntraAddr : UInt<7>, KernelIntraRW : UInt<1>, MacEnable : UInt<1>}

    reg stateReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[PEKernelCtrl.scala 35:25]
    node Tm = bits(io.Schedule, 23, 20) @[PEKernelCtrl.scala 38:23]
    node Tn = bits(io.Schedule, 19, 16) @[PEKernelCtrl.scala 39:23]
    node Ti = bits(io.Schedule, 15, 12) @[PEKernelCtrl.scala 40:23]
    node Tj = bits(io.Schedule, 11, 8) @[PEKernelCtrl.scala 41:23]
    node Tr = bits(io.Schedule, 7, 4) @[PEKernelCtrl.scala 42:23]
    node Tc = bits(io.Schedule, 3, 0) @[PEKernelCtrl.scala 43:23]
    node _GroupRowIdx_T = mul(Tr, Tc) @[PEKernelCtrl.scala 45:36]
    node GroupRowIdx = div(UInt<1>("h0"), _GroupRowIdx_T) @[PEKernelCtrl.scala 45:30]
    node _GroupColIdx_T = mul(Ti, Tj) @[PEKernelCtrl.scala 46:36]
    node GroupColIdx = div(UInt<1>("h0"), _GroupColIdx_T) @[PEKernelCtrl.scala 46:30]
    node _Group_T = cat(GroupRowIdx, GroupColIdx) @[Cat.scala 30:58]
    reg Group : UInt, clock with :
      reset => (reset, _Group_T) @[PEKernelCtrl.scala 47:22]
    node _boundary_T = mul(Ti, Tj) @[PEKernelCtrl.scala 49:22]
    node _boundary_T_1 = mul(Tr, Tc) @[PEKernelCtrl.scala 49:34]
    node boundary = div(_boundary_T, _boundary_T_1) @[PEKernelCtrl.scala 49:28]
    node _tm_T = div(UInt<5>("h10"), Tm) @[PEKernelCtrl.scala 51:34]
    node tm = div(UInt<1>("h0"), _tm_T) @[PEKernelCtrl.scala 51:21]
    node _tn_T = div(UInt<5>("h10"), Tn) @[PEKernelCtrl.scala 52:34]
    node tn = div(UInt<1>("h0"), _tn_T) @[PEKernelCtrl.scala 52:21]
    node _tj_T = mul(tn, Ti) @[PEKernelCtrl.scala 53:27]
    node _tj_T_1 = mul(_tj_T, Tj) @[PEKernelCtrl.scala 53:32]
    node _tj_T_2 = div(_tj_T_1, Tj) @[PEKernelCtrl.scala 53:38]
    node _tj_T_3 = sub(UInt<1>("h0"), _tj_T_2) @[PEKernelCtrl.scala 53:21]
    node tj = tail(_tj_T_3, 1) @[PEKernelCtrl.scala 53:21]
    node _ti_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PEKernelCtrl.scala 54:23]
    node _ti_T_1 = tail(_ti_T, 1) @[PEKernelCtrl.scala 54:23]
    node _ti_T_2 = mul(tn, Ti) @[PEKernelCtrl.scala 54:35]
    node _ti_T_3 = mul(_ti_T_2, Tj) @[PEKernelCtrl.scala 54:40]
    node _ti_T_4 = sub(_ti_T_1, _ti_T_3) @[PEKernelCtrl.scala 54:30]
    node _ti_T_5 = tail(_ti_T_4, 1) @[PEKernelCtrl.scala 54:30]
    node _ti_T_6 = mul(tj, Ti) @[PEKernelCtrl.scala 54:50]
    node _ti_T_7 = sub(_ti_T_5, _ti_T_6) @[PEKernelCtrl.scala 54:45]
    node _ti_T_8 = tail(_ti_T_7, 1) @[PEKernelCtrl.scala 54:45]
    node ti = div(_ti_T_8, Ti) @[PEKernelCtrl.scala 54:56]
    node _tc_T = mul(tm, Tc) @[PEKernelCtrl.scala 55:27]
    node _tc_T_1 = mul(_tc_T, Tr) @[PEKernelCtrl.scala 55:32]
    node _tc_T_2 = div(_tc_T_1, Tc) @[PEKernelCtrl.scala 55:38]
    node _tc_T_3 = sub(UInt<1>("h0"), _tc_T_2) @[PEKernelCtrl.scala 55:21]
    node tc = tail(_tc_T_3, 1) @[PEKernelCtrl.scala 55:21]
    node _tr_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PEKernelCtrl.scala 56:23]
    node _tr_T_1 = tail(_tr_T, 1) @[PEKernelCtrl.scala 56:23]
    node _tr_T_2 = mul(tm, Tc) @[PEKernelCtrl.scala 56:35]
    node _tr_T_3 = mul(_tr_T_2, Tr) @[PEKernelCtrl.scala 56:40]
    node _tr_T_4 = sub(_tr_T_1, _tr_T_3) @[PEKernelCtrl.scala 56:30]
    node _tr_T_5 = tail(_tr_T_4, 1) @[PEKernelCtrl.scala 56:30]
    node _tr_T_6 = mul(tc, Tr) @[PEKernelCtrl.scala 56:50]
    node _tr_T_7 = sub(_tr_T_5, _tr_T_6) @[PEKernelCtrl.scala 56:45]
    node _tr_T_8 = tail(_tr_T_7, 1) @[PEKernelCtrl.scala 56:45]
    node tr = div(_tr_T_8, Tr) @[PEKernelCtrl.scala 56:56]
    reg cntMac : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PEKernelCtrl.scala 58:23]
    reg slotPtr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PEKernelCtrl.scala 59:24]
    reg cntAddr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PEKernelCtrl.scala 60:24]
    reg cntbank : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PEKernelCtrl.scala 61:24]
    node Load2 = eq(io.Mode, UInt<2>("h2")) @[PEKernelCtrl.scala 64:24]
    reg readDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PEKernelCtrl.scala 65:25]
    reg macDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PEKernelCtrl.scala 66:24]
    node _T = eq(UInt<2>("h1"), stateReg) @[PEKernelCtrl.scala 68:21]
    when _T : @[PEKernelCtrl.scala 68:21]
      node _T_1 = eq(Load2, UInt<1>("h1")) @[PEKernelCtrl.scala 70:18]
      when _T_1 : @[PEKernelCtrl.scala 70:30]
        stateReg <= UInt<2>("h2") @[PEKernelCtrl.scala 71:18]
      else :
        stateReg <= UInt<2>("h1") @[PEKernelCtrl.scala 73:18]
    else :
      node _T_2 = eq(UInt<2>("h2"), stateReg) @[PEKernelCtrl.scala 68:21]
      when _T_2 : @[PEKernelCtrl.scala 68:21]
        node _T_3 = eq(readDone, UInt<1>("h1")) @[PEKernelCtrl.scala 77:21]
        when _T_3 : @[PEKernelCtrl.scala 77:33]
          stateReg <= UInt<2>("h3") @[PEKernelCtrl.scala 78:18]
        else :
          stateReg <= UInt<2>("h1") @[PEKernelCtrl.scala 80:18]
      else :
        node _T_4 = eq(UInt<2>("h3"), stateReg) @[PEKernelCtrl.scala 68:21]
        when _T_4 : @[PEKernelCtrl.scala 68:21]
          node _T_5 = eq(macDone, UInt<1>("h1")) @[PEKernelCtrl.scala 84:20]
          when _T_5 : @[PEKernelCtrl.scala 84:32]
            stateReg <= UInt<2>("h1") @[PEKernelCtrl.scala 85:18]
          else :
            stateReg <= UInt<2>("h3") @[PEKernelCtrl.scala 87:18]
    io.KernelAddr <= UInt<1>("h0") @[PEKernelCtrl.scala 92:17]
    io.KernelBankIdx <= UInt<1>("h0") @[PEKernelCtrl.scala 93:20]
    io.KernelBufRW <= UInt<1>("h0") @[PEKernelCtrl.scala 94:18]
    io.KernelBufEn <= UInt<1>("h0") @[PEKernelCtrl.scala 95:18]
    io.KernelIntraAddr <= UInt<1>("h0") @[PEKernelCtrl.scala 96:22]
    io.KernelIntraRW <= UInt<1>("h0") @[PEKernelCtrl.scala 97:20]
    io.MacEnable <= UInt<1>("h0") @[PEKernelCtrl.scala 98:16]
    node _T_6 = eq(UInt<2>("h1"), stateReg) @[PEKernelCtrl.scala 99:20]
    when _T_6 : @[PEKernelCtrl.scala 99:20]
      io.KernelAddr <= UInt<1>("h0") @[PEKernelCtrl.scala 101:21]
      io.KernelBankIdx <= UInt<1>("h0") @[PEKernelCtrl.scala 102:24]
      io.KernelBufRW <= UInt<1>("h0") @[PEKernelCtrl.scala 103:22]
      io.KernelBufEn <= UInt<1>("h0") @[PEKernelCtrl.scala 104:22]
      io.KernelIntraAddr <= UInt<1>("h0") @[PEKernelCtrl.scala 105:26]
      io.KernelIntraRW <= UInt<1>("h0") @[PEKernelCtrl.scala 106:24]
      readDone <= UInt<1>("h0") @[PEKernelCtrl.scala 107:16]
      macDone <= UInt<1>("h0") @[PEKernelCtrl.scala 108:15]
    else :
      node _T_7 = eq(UInt<2>("h2"), stateReg) @[PEKernelCtrl.scala 99:20]
      when _T_7 : @[PEKernelCtrl.scala 99:20]
        io.KernelBufRW <= UInt<1>("h0") @[PEKernelCtrl.scala 111:22]
        io.KernelBufEn <= UInt<1>("h1") @[PEKernelCtrl.scala 112:22]
        io.KernelIntraRW <= UInt<1>("h1") @[PEKernelCtrl.scala 113:24]
        node _T_8 = lt(cntAddr, boundary) @[PEKernelCtrl.scala 114:20]
        when _T_8 : @[PEKernelCtrl.scala 114:32]
          io.KernelAddr <= cntAddr @[PEKernelCtrl.scala 115:23]
          io.KernelBankIdx <= cntbank @[PEKernelCtrl.scala 116:26]
          io.KernelIntraAddr <= slotPtr @[PEKernelCtrl.scala 117:28]
          node _cntAddr_T = add(cntAddr, UInt<1>("h1")) @[PEKernelCtrl.scala 119:28]
          node _cntAddr_T_1 = tail(_cntAddr_T, 1) @[PEKernelCtrl.scala 119:28]
          cntAddr <= _cntAddr_T_1 @[PEKernelCtrl.scala 119:17]
        else :
          io.KernelAddr <= UInt<1>("h0") @[PEKernelCtrl.scala 121:23]
          node _io_KernelBankIdx_T = add(cntbank, UInt<1>("h1")) @[PEKernelCtrl.scala 122:37]
          node _io_KernelBankIdx_T_1 = tail(_io_KernelBankIdx_T, 1) @[PEKernelCtrl.scala 122:37]
          io.KernelBankIdx <= _io_KernelBankIdx_T_1 @[PEKernelCtrl.scala 122:26]
          io.KernelIntraAddr <= slotPtr @[PEKernelCtrl.scala 123:28]
          cntAddr <= UInt<1>("h0") @[PEKernelCtrl.scala 125:17]
          node _cntbank_T = add(cntbank, UInt<1>("h1")) @[PEKernelCtrl.scala 126:28]
          node _cntbank_T_1 = tail(_cntbank_T, 1) @[PEKernelCtrl.scala 126:28]
          cntbank <= _cntbank_T_1 @[PEKernelCtrl.scala 126:17]
        node _slotPtr_T = add(slotPtr, UInt<1>("h1")) @[PEKernelCtrl.scala 129:26]
        node _slotPtr_T_1 = tail(_slotPtr_T, 1) @[PEKernelCtrl.scala 129:26]
        slotPtr <= _slotPtr_T_1 @[PEKernelCtrl.scala 129:15]
        node _T_9 = mul(Ti, Tj) @[PEKernelCtrl.scala 132:27]
        node _T_10 = eq(slotPtr, _T_9) @[PEKernelCtrl.scala 132:20]
        when _T_10 : @[PEKernelCtrl.scala 132:33]
          readDone <= UInt<1>("h1") @[PEKernelCtrl.scala 134:18]
          slotPtr <= UInt<1>("h0") @[PEKernelCtrl.scala 135:17]
      else :
        node _T_11 = eq(UInt<2>("h3"), stateReg) @[PEKernelCtrl.scala 99:20]
        when _T_11 : @[PEKernelCtrl.scala 99:20]
          io.KernelIntraRW <= UInt<1>("h0") @[PEKernelCtrl.scala 139:24]
          io.MacEnable <= UInt<1>("h1") @[PEKernelCtrl.scala 140:20]
          node _T_12 = add(slotPtr, UInt<1>("h0")) @[PEKernelCtrl.scala 141:21]
          node _T_13 = tail(_T_12, 1) @[PEKernelCtrl.scala 141:21]
          node _T_14 = sub(Tj, UInt<1>("h1")) @[PEKernelCtrl.scala 141:43]
          node _T_15 = tail(_T_14, 1) @[PEKernelCtrl.scala 141:43]
          node _T_16 = mul(tc, _T_15) @[PEKernelCtrl.scala 141:37]
          node _T_17 = add(_T_13, _T_16) @[PEKernelCtrl.scala 141:32]
          node _T_18 = tail(_T_17, 1) @[PEKernelCtrl.scala 141:32]
          node _T_19 = lt(_T_18, Tj) @[PEKernelCtrl.scala 141:51]
          when _T_19 : @[PEKernelCtrl.scala 141:57]
            node _io_KernelIntraAddr_T = add(slotPtr, UInt<1>("h0")) @[PEKernelCtrl.scala 142:39]
            node _io_KernelIntraAddr_T_1 = tail(_io_KernelIntraAddr_T, 1) @[PEKernelCtrl.scala 142:39]
            node _io_KernelIntraAddr_T_2 = sub(Tj, UInt<1>("h1")) @[PEKernelCtrl.scala 142:61]
            node _io_KernelIntraAddr_T_3 = tail(_io_KernelIntraAddr_T_2, 1) @[PEKernelCtrl.scala 142:61]
            node _io_KernelIntraAddr_T_4 = mul(tc, _io_KernelIntraAddr_T_3) @[PEKernelCtrl.scala 142:55]
            node _io_KernelIntraAddr_T_5 = add(_io_KernelIntraAddr_T_1, _io_KernelIntraAddr_T_4) @[PEKernelCtrl.scala 142:50]
            node _io_KernelIntraAddr_T_6 = tail(_io_KernelIntraAddr_T_5, 1) @[PEKernelCtrl.scala 142:50]
            io.KernelIntraAddr <= _io_KernelIntraAddr_T_6 @[PEKernelCtrl.scala 142:28]
          else :
            node _io_KernelIntraAddr_T_7 = add(slotPtr, UInt<1>("h0")) @[PEKernelCtrl.scala 145:39]
            node _io_KernelIntraAddr_T_8 = tail(_io_KernelIntraAddr_T_7, 1) @[PEKernelCtrl.scala 145:39]
            node _io_KernelIntraAddr_T_9 = sub(Tj, UInt<1>("h1")) @[PEKernelCtrl.scala 145:61]
            node _io_KernelIntraAddr_T_10 = tail(_io_KernelIntraAddr_T_9, 1) @[PEKernelCtrl.scala 145:61]
            node _io_KernelIntraAddr_T_11 = mul(tc, _io_KernelIntraAddr_T_10) @[PEKernelCtrl.scala 145:55]
            node _io_KernelIntraAddr_T_12 = add(_io_KernelIntraAddr_T_8, _io_KernelIntraAddr_T_11) @[PEKernelCtrl.scala 145:50]
            node _io_KernelIntraAddr_T_13 = tail(_io_KernelIntraAddr_T_12, 1) @[PEKernelCtrl.scala 145:50]
            node _io_KernelIntraAddr_T_14 = sub(_io_KernelIntraAddr_T_13, Tj) @[PEKernelCtrl.scala 145:68]
            node _io_KernelIntraAddr_T_15 = tail(_io_KernelIntraAddr_T_14, 1) @[PEKernelCtrl.scala 145:68]
            io.KernelIntraAddr <= _io_KernelIntraAddr_T_15 @[PEKernelCtrl.scala 145:28]
          node _slotPtr_T_2 = add(io.KernelIntraAddr, Tr) @[PEKernelCtrl.scala 148:37]
          node _slotPtr_T_3 = tail(_slotPtr_T_2, 1) @[PEKernelCtrl.scala 148:37]
          slotPtr <= _slotPtr_T_3 @[PEKernelCtrl.scala 148:15]
          node _cntMac_T = add(cntMac, UInt<1>("h1")) @[PEKernelCtrl.scala 149:24]
          node _cntMac_T_1 = tail(_cntMac_T, 1) @[PEKernelCtrl.scala 149:24]
          cntMac <= _cntMac_T_1 @[PEKernelCtrl.scala 149:14]
          node _T_20 = mul(Ti, Tj) @[PEKernelCtrl.scala 151:26]
          node _T_21 = eq(cntMac, _T_20) @[PEKernelCtrl.scala 151:19]
          when _T_21 : @[PEKernelCtrl.scala 151:32]
            macDone <= UInt<1>("h1") @[PEKernelCtrl.scala 152:17]
            cntMac <= UInt<1>("h0") @[PEKernelCtrl.scala 153:16]

