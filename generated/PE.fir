circuit PE :
  module IntraBuffer :
    input clock : Clock
    input reset : Reset
    output io : { BankIO : { flip DataIn : UInt<16>, flip DataAddr : UInt<7>, flip ReadWrite : UInt<1>, flip Enable : UInt<1>, DataOut : UInt<16>}}

    wire _buffer_WIRE : UInt<16>[128] @[IntraBuffer.scala 12:44]
    _buffer_WIRE[0] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[1] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[2] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[3] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[4] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[5] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[6] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[7] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[8] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[9] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[10] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[11] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[12] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[13] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[14] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[15] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[16] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[17] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[18] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[19] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[20] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[21] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[22] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[23] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[24] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[25] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[26] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[27] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[28] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[29] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[30] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[31] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[32] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[33] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[34] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[35] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[36] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[37] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[38] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[39] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[40] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[41] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[42] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[43] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[44] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[45] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[46] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[47] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[48] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[49] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[50] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[51] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[52] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[53] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[54] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[55] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[56] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[57] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[58] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[59] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[60] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[61] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[62] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[63] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[64] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[65] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[66] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[67] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[68] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[69] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[70] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[71] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[72] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[73] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[74] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[75] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[76] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[77] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[78] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[79] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[80] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[81] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[82] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[83] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[84] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[85] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[86] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[87] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[88] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[89] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[90] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[91] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[92] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[93] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[94] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[95] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[96] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[97] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[98] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[99] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[100] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[101] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[102] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[103] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[104] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[105] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[106] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[107] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[108] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[109] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[110] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[111] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[112] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[113] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[114] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[115] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[116] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[117] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[118] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[119] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[120] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[121] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[122] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[123] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[124] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[125] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[126] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[127] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    reg buffer : UInt<16>[128], clock with :
      reset => (reset, _buffer_WIRE) @[IntraBuffer.scala 12:24]
    io.BankIO.DataOut <= UInt<1>("h0") @[IntraBuffer.scala 14:21]
    node _T = eq(io.BankIO.Enable, UInt<1>("h1")) @[IntraBuffer.scala 15:25]
    when _T : @[IntraBuffer.scala 15:37]
      node _T_1 = eq(io.BankIO.ReadWrite, UInt<1>("h0")) @[IntraBuffer.scala 16:30]
      when _T_1 : @[IntraBuffer.scala 16:43]
        buffer[io.BankIO.DataAddr] <= io.BankIO.DataIn @[IntraBuffer.scala 17:34]
      else :
        io.BankIO.DataOut <= buffer[io.BankIO.DataAddr] @[IntraBuffer.scala 19:25]

  module IntraBuffer_1 :
    input clock : Clock
    input reset : Reset
    output io : { BankIO : { flip DataIn : UInt<16>, flip DataAddr : UInt<7>, flip ReadWrite : UInt<1>, flip Enable : UInt<1>, DataOut : UInt<16>}}

    wire _buffer_WIRE : UInt<16>[128] @[IntraBuffer.scala 12:44]
    _buffer_WIRE[0] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[1] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[2] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[3] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[4] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[5] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[6] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[7] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[8] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[9] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[10] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[11] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[12] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[13] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[14] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[15] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[16] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[17] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[18] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[19] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[20] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[21] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[22] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[23] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[24] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[25] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[26] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[27] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[28] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[29] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[30] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[31] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[32] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[33] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[34] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[35] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[36] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[37] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[38] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[39] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[40] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[41] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[42] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[43] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[44] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[45] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[46] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[47] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[48] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[49] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[50] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[51] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[52] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[53] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[54] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[55] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[56] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[57] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[58] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[59] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[60] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[61] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[62] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[63] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[64] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[65] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[66] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[67] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[68] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[69] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[70] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[71] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[72] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[73] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[74] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[75] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[76] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[77] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[78] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[79] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[80] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[81] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[82] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[83] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[84] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[85] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[86] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[87] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[88] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[89] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[90] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[91] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[92] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[93] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[94] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[95] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[96] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[97] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[98] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[99] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[100] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[101] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[102] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[103] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[104] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[105] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[106] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[107] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[108] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[109] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[110] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[111] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[112] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[113] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[114] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[115] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[116] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[117] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[118] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[119] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[120] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[121] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[122] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[123] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[124] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[125] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[126] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    _buffer_WIRE[127] <= UInt<16>("h0") @[IntraBuffer.scala 12:44]
    reg buffer : UInt<16>[128], clock with :
      reset => (reset, _buffer_WIRE) @[IntraBuffer.scala 12:24]
    io.BankIO.DataOut <= UInt<1>("h0") @[IntraBuffer.scala 14:21]
    node _T = eq(io.BankIO.Enable, UInt<1>("h1")) @[IntraBuffer.scala 15:25]
    when _T : @[IntraBuffer.scala 15:37]
      node _T_1 = eq(io.BankIO.ReadWrite, UInt<1>("h0")) @[IntraBuffer.scala 16:30]
      when _T_1 : @[IntraBuffer.scala 16:43]
        buffer[io.BankIO.DataAddr] <= io.BankIO.DataIn @[IntraBuffer.scala 17:34]
      else :
        io.BankIO.DataOut <= buffer[io.BankIO.DataAddr] @[IntraBuffer.scala 19:25]

  module PECtrl :
    input clock : Clock
    input reset : Reset
    output io : { SchePort : { flip Mode : UInt<3>, flip Schedule : UInt<24>, flip ScheduleSize : UInt<7>}, KernelBuf : { Enable : UInt<1>, ReadWrite : UInt<1>, Addr : UInt<10>, flip DataIn : UInt<16>, BankIdx : UInt<4>}, NeuronBuf : { Enable : UInt<1>, ReadWrite : UInt<1>, Addr : UInt<10>, flip DataIn : UInt<16>, BankIdx : UInt<4>}, KernelIntra : { Enable : UInt<1>, ReadWrite : UInt<1>, DataAddr : UInt<7>}, NeuronIntra : { Enable : UInt<1>, ReadWrite : UInt<1>, DataAddr : UInt<7>}, MacEnable : UInt<1>}

    reg stateReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[PECtrl.scala 40:25]
    node _Tm_T = bits(io.SchePort.Schedule, 23, 20) @[PECtrl.scala 44:32]
    node _Tm_T_1 = add(_Tm_T, UInt<1>("h1")) @[PECtrl.scala 44:41]
    node Tm = tail(_Tm_T_1, 1) @[PECtrl.scala 44:41]
    node _Tn_T = bits(io.SchePort.Schedule, 19, 16) @[PECtrl.scala 45:32]
    node _Tn_T_1 = add(_Tn_T, UInt<1>("h1")) @[PECtrl.scala 45:41]
    node Tn = tail(_Tn_T_1, 1) @[PECtrl.scala 45:41]
    node _Ti_T = bits(io.SchePort.Schedule, 15, 12) @[PECtrl.scala 46:32]
    node _Ti_T_1 = add(_Ti_T, UInt<1>("h1")) @[PECtrl.scala 46:41]
    node Ti = tail(_Ti_T_1, 1) @[PECtrl.scala 46:41]
    node _Tj_T = bits(io.SchePort.Schedule, 11, 8) @[PECtrl.scala 47:32]
    node _Tj_T_1 = add(_Tj_T, UInt<1>("h1")) @[PECtrl.scala 47:40]
    node Tj = tail(_Tj_T_1, 1) @[PECtrl.scala 47:40]
    node _Tr_T = bits(io.SchePort.Schedule, 7, 4) @[PECtrl.scala 48:32]
    node _Tr_T_1 = add(_Tr_T, UInt<1>("h1")) @[PECtrl.scala 48:39]
    node Tr = tail(_Tr_T_1, 1) @[PECtrl.scala 48:39]
    node _Tc_T = bits(io.SchePort.Schedule, 3, 0) @[PECtrl.scala 49:32]
    node _Tc_T_1 = add(_Tc_T, UInt<1>("h1")) @[PECtrl.scala 49:39]
    node Tc = tail(_Tc_T_1, 1) @[PECtrl.scala 49:39]
    node _GroupRowIdx_T = mul(Tr, Tc) @[PECtrl.scala 51:36]
    node GroupRowIdx = div(UInt<1>("h0"), _GroupRowIdx_T) @[PECtrl.scala 51:30]
    node _GroupColIdx_T = mul(Ti, Tj) @[PECtrl.scala 52:36]
    node GroupColIdx = div(UInt<1>("h0"), _GroupColIdx_T) @[PECtrl.scala 52:30]
    node _Group_T = cat(GroupRowIdx, GroupColIdx) @[Cat.scala 30:58]
    reg Group : UInt, clock with :
      reset => (reset, _Group_T) @[PECtrl.scala 53:22]
    node _KernelBoundary_T = mul(Ti, Tj) @[PECtrl.scala 54:33]
    node _KernelBoundary_T_1 = mul(Tr, Tc) @[PECtrl.scala 54:44]
    node KernelBoundary_result = div(_KernelBoundary_T, _KernelBoundary_T_1) @[Util.scala 8:22]
    node _KernelBoundary_T_2 = mul(_KernelBoundary_T_1, KernelBoundary_result) @[Util.scala 9:13]
    node _KernelBoundary_T_3 = add(KernelBoundary_result, UInt<1>("h1")) @[Util.scala 12:14]
    node KernelBoundary = tail(_KernelBoundary_T_3, 1) @[Util.scala 12:14]
    node _NeuronBoundary_T = mul(Tr, Tc) @[PECtrl.scala 55:41]
    node NeuronBoundary = div(io.SchePort.ScheduleSize, _NeuronBoundary_T) @[PECtrl.scala 55:35]
    node HoldBoundary = div(Tj, Tc) @[PECtrl.scala 56:25]
    node _MacCycle_T = sub(io.SchePort.ScheduleSize, Tj) @[PECtrl.scala 57:35]
    node _MacCycle_T_1 = tail(_MacCycle_T, 1) @[PECtrl.scala 57:35]
    node MacCycle_result = div(_MacCycle_T_1, Tc) @[Util.scala 8:22]
    node _MacCycle_T_2 = mul(Tc, MacCycle_result) @[Util.scala 9:13]
    node _MacCycle_T_3 = add(MacCycle_result, UInt<1>("h1")) @[Util.scala 12:14]
    node MacCycle = tail(_MacCycle_T_3, 1) @[Util.scala 12:14]
    node _tm_T = div(UInt<5>("h10"), Tm) @[PECtrl.scala 59:34]
    node tm = div(UInt<1>("h0"), _tm_T) @[PECtrl.scala 59:21]
    node _tn_T = div(UInt<5>("h10"), Tn) @[PECtrl.scala 60:34]
    node tn = div(UInt<1>("h0"), _tn_T) @[PECtrl.scala 60:21]
    node _tj_T = mul(tn, Ti) @[PECtrl.scala 61:27]
    node _tj_T_1 = mul(_tj_T, Tj) @[PECtrl.scala 61:32]
    node _tj_T_2 = div(_tj_T_1, Tj) @[PECtrl.scala 61:38]
    node _tj_T_3 = sub(UInt<1>("h0"), _tj_T_2) @[PECtrl.scala 61:21]
    node tj = tail(_tj_T_3, 1) @[PECtrl.scala 61:21]
    node _ti_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PECtrl.scala 62:23]
    node _ti_T_1 = tail(_ti_T, 1) @[PECtrl.scala 62:23]
    node _ti_T_2 = mul(tn, Ti) @[PECtrl.scala 62:35]
    node _ti_T_3 = mul(_ti_T_2, Tj) @[PECtrl.scala 62:40]
    node _ti_T_4 = sub(_ti_T_1, _ti_T_3) @[PECtrl.scala 62:30]
    node _ti_T_5 = tail(_ti_T_4, 1) @[PECtrl.scala 62:30]
    node _ti_T_6 = mul(tj, Ti) @[PECtrl.scala 62:50]
    node _ti_T_7 = sub(_ti_T_5, _ti_T_6) @[PECtrl.scala 62:45]
    node _ti_T_8 = tail(_ti_T_7, 1) @[PECtrl.scala 62:45]
    node ti = div(_ti_T_8, Ti) @[PECtrl.scala 62:56]
    node _tc_T = mul(tm, Tc) @[PECtrl.scala 63:27]
    node _tc_T_1 = mul(_tc_T, Tr) @[PECtrl.scala 63:32]
    node _tc_T_2 = div(_tc_T_1, Tc) @[PECtrl.scala 63:38]
    node _tc_T_3 = sub(UInt<1>("h0"), _tc_T_2) @[PECtrl.scala 63:21]
    node tc = tail(_tc_T_3, 1) @[PECtrl.scala 63:21]
    node _tr_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PECtrl.scala 64:23]
    node _tr_T_1 = tail(_tr_T, 1) @[PECtrl.scala 64:23]
    node _tr_T_2 = mul(tm, Tc) @[PECtrl.scala 64:35]
    node _tr_T_3 = mul(_tr_T_2, Tr) @[PECtrl.scala 64:40]
    node _tr_T_4 = sub(_tr_T_1, _tr_T_3) @[PECtrl.scala 64:30]
    node _tr_T_5 = tail(_tr_T_4, 1) @[PECtrl.scala 64:30]
    node _tr_T_6 = mul(tc, Tr) @[PECtrl.scala 64:50]
    node _tr_T_7 = sub(_tr_T_5, _tr_T_6) @[PECtrl.scala 64:45]
    node _tr_T_8 = tail(_tr_T_7, 1) @[PECtrl.scala 64:45]
    node tr = div(_tr_T_8, Tr) @[PECtrl.scala 64:56]
    reg cntMac : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 66:23]
    reg KernelSlotPtr : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[PECtrl.scala 67:30]
    reg cntKBufAddr : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[PECtrl.scala 68:28]
    reg cntKBufBank : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 69:28]
    reg NeuronSlotPtr : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[PECtrl.scala 70:30]
    reg cntNBufAddr : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[PECtrl.scala 71:28]
    reg cntNBufBank : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 72:28]
    node _cntHoldBase_T = gt(tc, UInt<1>("h0")) @[PECtrl.scala 73:28]
    node _cntHoldBase_T_1 = div(tj, HoldBoundary) @[PECtrl.scala 74:37]
    node _cntHoldBase_T_2 = rem(_cntHoldBase_T_1, HoldBoundary) @[PECtrl.scala 74:53]
    reg cntHoldBase_REG : UInt, clock with :
      reset => (reset, _cntHoldBase_T_2) @[PECtrl.scala 74:32]
    node _cntHoldBase_T_3 = lt(tj, tc) @[PECtrl.scala 75:37]
    node _cntHoldBase_T_4 = sub(Tj, tc) @[PECtrl.scala 75:63]
    node _cntHoldBase_T_5 = tail(_cntHoldBase_T_4, 1) @[PECtrl.scala 75:63]
    node _cntHoldBase_T_6 = geq(tj, _cntHoldBase_T_5) @[PECtrl.scala 75:56]
    node _cntHoldBase_T_7 = add(_cntHoldBase_T_3, _cntHoldBase_T_6) @[PECtrl.scala 75:50]
    node _cntHoldBase_T_8 = tail(_cntHoldBase_T_7, 1) @[PECtrl.scala 75:50]
    reg cntHoldBase_REG_1 : UInt, clock with :
      reset => (reset, _cntHoldBase_T_8) @[PECtrl.scala 75:32]
    node cntHoldBase = mux(_cntHoldBase_T, cntHoldBase_REG, cntHoldBase_REG_1) @[PECtrl.scala 73:24]
    reg cntHold : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 76:24]
    node Load2 = eq(io.SchePort.Mode, UInt<2>("h2")) @[PECtrl.scala 79:33]
    reg KernelReadDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 80:31]
    reg NeuronReadDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 81:31]
    node Load2Done = and(KernelReadDone, NeuronReadDone) @[PECtrl.scala 82:35]
    reg macDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 83:24]
    node _T = eq(UInt<2>("h1"), stateReg) @[PECtrl.scala 85:21]
    when _T : @[PECtrl.scala 85:21]
      node _T_1 = eq(Load2, UInt<1>("h1")) @[PECtrl.scala 87:18]
      when _T_1 : @[PECtrl.scala 87:30]
        stateReg <= UInt<2>("h2") @[PECtrl.scala 88:18]
      else :
        stateReg <= UInt<2>("h1") @[PECtrl.scala 90:18]
    else :
      node _T_2 = eq(UInt<2>("h2"), stateReg) @[PECtrl.scala 85:21]
      when _T_2 : @[PECtrl.scala 85:21]
        node _T_3 = eq(Load2Done, UInt<1>("h1")) @[PECtrl.scala 94:22]
        when _T_3 : @[PECtrl.scala 94:34]
          stateReg <= UInt<2>("h3") @[PECtrl.scala 95:18]
        else :
          stateReg <= UInt<2>("h2") @[PECtrl.scala 98:18]
      else :
        node _T_4 = eq(UInt<2>("h3"), stateReg) @[PECtrl.scala 85:21]
        when _T_4 : @[PECtrl.scala 85:21]
          node _T_5 = eq(macDone, UInt<1>("h1")) @[PECtrl.scala 102:20]
          when _T_5 : @[PECtrl.scala 102:32]
            stateReg <= UInt<2>("h1") @[PECtrl.scala 103:18]
          else :
            stateReg <= UInt<2>("h3") @[PECtrl.scala 105:18]
    io.KernelBuf.Addr <= UInt<1>("h0") @[PECtrl.scala 110:21]
    io.KernelBuf.BankIdx <= UInt<1>("h0") @[PECtrl.scala 111:24]
    io.KernelBuf.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 112:26]
    io.KernelBuf.Enable <= UInt<1>("h0") @[PECtrl.scala 113:23]
    io.KernelIntra.DataAddr <= UInt<1>("h0") @[PECtrl.scala 114:27]
    io.KernelIntra.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 115:28]
    io.KernelIntra.Enable <= UInt<1>("h0") @[PECtrl.scala 116:25]
    io.NeuronBuf.Addr <= UInt<1>("h0") @[PECtrl.scala 117:21]
    io.NeuronBuf.BankIdx <= UInt<1>("h0") @[PECtrl.scala 118:24]
    io.NeuronBuf.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 119:26]
    io.NeuronBuf.Enable <= UInt<1>("h0") @[PECtrl.scala 120:23]
    io.NeuronIntra.DataAddr <= UInt<1>("h0") @[PECtrl.scala 121:27]
    io.NeuronIntra.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 122:28]
    io.NeuronIntra.Enable <= UInt<1>("h0") @[PECtrl.scala 123:25]
    io.MacEnable <= UInt<1>("h0") @[PECtrl.scala 124:16]
    node _T_6 = eq(UInt<2>("h1"), stateReg) @[PECtrl.scala 127:20]
    when _T_6 : @[PECtrl.scala 127:20]
      io.KernelBuf.Addr <= UInt<1>("h0") @[PECtrl.scala 129:25]
      io.KernelBuf.BankIdx <= UInt<1>("h0") @[PECtrl.scala 130:28]
      io.KernelBuf.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 131:30]
      io.KernelBuf.Enable <= UInt<1>("h0") @[PECtrl.scala 132:27]
      io.KernelIntra.DataAddr <= UInt<1>("h0") @[PECtrl.scala 133:31]
      io.KernelIntra.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 134:32]
      io.KernelIntra.Enable <= UInt<1>("h0") @[PECtrl.scala 135:29]
      io.NeuronBuf.Addr <= UInt<1>("h0") @[PECtrl.scala 136:25]
      io.NeuronBuf.BankIdx <= UInt<1>("h0") @[PECtrl.scala 137:28]
      io.NeuronBuf.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 138:30]
      io.NeuronBuf.Enable <= UInt<1>("h0") @[PECtrl.scala 139:27]
      io.NeuronIntra.DataAddr <= UInt<1>("h0") @[PECtrl.scala 140:31]
      io.NeuronIntra.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 141:32]
      io.NeuronIntra.Enable <= UInt<1>("h0") @[PECtrl.scala 142:29]
      KernelReadDone <= UInt<1>("h0") @[PECtrl.scala 143:22]
      NeuronReadDone <= UInt<1>("h0") @[PECtrl.scala 144:22]
      macDone <= UInt<1>("h0") @[PECtrl.scala 145:15]
    else :
      node _T_7 = eq(UInt<2>("h2"), stateReg) @[PECtrl.scala 127:20]
      when _T_7 : @[PECtrl.scala 127:20]
        io.KernelBuf.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 148:30]
        io.KernelBuf.Enable <= UInt<1>("h1") @[PECtrl.scala 149:27]
        io.KernelIntra.ReadWrite <= UInt<1>("h1") @[PECtrl.scala 150:32]
        io.NeuronBuf.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 151:30]
        io.NeuronBuf.Enable <= UInt<1>("h1") @[PECtrl.scala 152:27]
        io.NeuronIntra.ReadWrite <= UInt<1>("h1") @[PECtrl.scala 153:32]
        node _T_8 = eq(KernelReadDone, UInt<1>("h0")) @[PECtrl.scala 156:27]
        when _T_8 : @[PECtrl.scala 156:40]
          io.KernelIntra.Enable <= UInt<1>("h1") @[PECtrl.scala 157:31]
          node _T_9 = lt(cntKBufAddr, KernelBoundary) @[PECtrl.scala 158:26]
          when _T_9 : @[PECtrl.scala 158:44]
            io.KernelBuf.Addr <= cntKBufAddr @[PECtrl.scala 159:29]
            io.KernelBuf.BankIdx <= cntKBufBank @[PECtrl.scala 160:32]
            io.KernelIntra.DataAddr <= KernelSlotPtr @[PECtrl.scala 161:35]
            node _cntKBufAddr_T = add(cntKBufAddr, UInt<1>("h1")) @[PECtrl.scala 163:38]
            node _cntKBufAddr_T_1 = tail(_cntKBufAddr_T, 1) @[PECtrl.scala 163:38]
            cntKBufAddr <= _cntKBufAddr_T_1 @[PECtrl.scala 163:23]
          else :
            io.KernelBuf.Addr <= UInt<1>("h0") @[PECtrl.scala 165:29]
            node _io_KernelBuf_BankIdx_T = add(cntKBufBank, UInt<1>("h1")) @[PECtrl.scala 166:47]
            node _io_KernelBuf_BankIdx_T_1 = tail(_io_KernelBuf_BankIdx_T, 1) @[PECtrl.scala 166:47]
            io.KernelBuf.BankIdx <= _io_KernelBuf_BankIdx_T_1 @[PECtrl.scala 166:32]
            io.KernelIntra.DataAddr <= KernelSlotPtr @[PECtrl.scala 167:35]
            cntKBufAddr <= UInt<1>("h0") @[PECtrl.scala 169:23]
            node _cntKBufBank_T = add(cntKBufBank, UInt<1>("h1")) @[PECtrl.scala 170:38]
            node _cntKBufBank_T_1 = tail(_cntKBufBank_T, 1) @[PECtrl.scala 170:38]
            cntKBufBank <= _cntKBufBank_T_1 @[PECtrl.scala 170:23]
          node _KernelSlotPtr_T = add(KernelSlotPtr, UInt<1>("h1")) @[PECtrl.scala 172:40]
          node _KernelSlotPtr_T_1 = tail(_KernelSlotPtr_T, 1) @[PECtrl.scala 172:40]
          KernelSlotPtr <= _KernelSlotPtr_T_1 @[PECtrl.scala 172:23]
          node _T_10 = mul(Ti, Tj) @[PECtrl.scala 175:35]
          node _T_11 = eq(KernelSlotPtr, _T_10) @[PECtrl.scala 175:28]
          when _T_11 : @[PECtrl.scala 175:41]
            KernelReadDone <= UInt<1>("h1") @[PECtrl.scala 177:26]
            KernelSlotPtr <= UInt<1>("h0") @[PECtrl.scala 178:25]
        node _T_12 = eq(NeuronReadDone, UInt<1>("h0")) @[PECtrl.scala 183:27]
        when _T_12 : @[PECtrl.scala 183:40]
          io.NeuronIntra.Enable <= UInt<1>("h1") @[PECtrl.scala 184:31]
          node _T_13 = lt(cntNBufAddr, NeuronBoundary) @[PECtrl.scala 185:26]
          when _T_13 : @[PECtrl.scala 185:44]
            io.NeuronBuf.Addr <= cntNBufAddr @[PECtrl.scala 186:29]
            io.NeuronBuf.BankIdx <= cntNBufBank @[PECtrl.scala 187:32]
            io.NeuronIntra.DataAddr <= NeuronSlotPtr @[PECtrl.scala 188:35]
            node _cntNBufAddr_T = add(cntNBufAddr, UInt<1>("h1")) @[PECtrl.scala 190:38]
            node _cntNBufAddr_T_1 = tail(_cntNBufAddr_T, 1) @[PECtrl.scala 190:38]
            cntNBufAddr <= _cntNBufAddr_T_1 @[PECtrl.scala 190:23]
          NeuronSlotPtr <= cntNBufAddr @[PECtrl.scala 195:23]
          node _T_14 = eq(NeuronSlotPtr, NeuronBoundary) @[PECtrl.scala 196:28]
          when _T_14 : @[PECtrl.scala 196:48]
            NeuronReadDone <= UInt<1>("h1") @[PECtrl.scala 197:26]
            NeuronSlotPtr <= UInt<1>("h0") @[PECtrl.scala 198:25]
      else :
        node _T_15 = eq(UInt<2>("h3"), stateReg) @[PECtrl.scala 127:20]
        when _T_15 : @[PECtrl.scala 127:20]
          io.KernelBuf.Enable <= UInt<1>("h0") @[PECtrl.scala 203:27]
          io.KernelIntra.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 204:32]
          io.NeuronBuf.Enable <= UInt<1>("h0") @[PECtrl.scala 205:27]
          io.NeuronIntra.ReadWrite <= UInt<1>("h0") @[PECtrl.scala 206:32]
          io.MacEnable <= UInt<1>("h1") @[PECtrl.scala 207:20]
          cntHold <= cntHoldBase @[PECtrl.scala 208:15]
          node _NeuronSlotPtr_T = lt(tj, tc) @[PECtrl.scala 209:28]
          NeuronSlotPtr <= _NeuronSlotPtr_T @[PECtrl.scala 209:21]
          node _T_16 = eq(macDone, UInt<1>("h0")) @[PECtrl.scala 210:20]
          when _T_16 : @[PECtrl.scala 210:33]
            node _T_17 = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 212:29]
            node _T_18 = tail(_T_17, 1) @[PECtrl.scala 212:29]
            node _T_19 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 212:51]
            node _T_20 = tail(_T_19, 1) @[PECtrl.scala 212:51]
            node _T_21 = mul(tc, _T_20) @[PECtrl.scala 212:45]
            node _T_22 = add(_T_18, _T_21) @[PECtrl.scala 212:40]
            node _T_23 = tail(_T_22, 1) @[PECtrl.scala 212:40]
            node _T_24 = lt(_T_23, Tj) @[PECtrl.scala 212:59]
            when _T_24 : @[PECtrl.scala 212:65]
              node _io_KernelIntra_DataAddr_T = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 213:52]
              node _io_KernelIntra_DataAddr_T_1 = tail(_io_KernelIntra_DataAddr_T, 1) @[PECtrl.scala 213:52]
              node _io_KernelIntra_DataAddr_T_2 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 213:74]
              node _io_KernelIntra_DataAddr_T_3 = tail(_io_KernelIntra_DataAddr_T_2, 1) @[PECtrl.scala 213:74]
              node _io_KernelIntra_DataAddr_T_4 = mul(tc, _io_KernelIntra_DataAddr_T_3) @[PECtrl.scala 213:68]
              node _io_KernelIntra_DataAddr_T_5 = add(_io_KernelIntra_DataAddr_T_1, _io_KernelIntra_DataAddr_T_4) @[PECtrl.scala 213:63]
              node _io_KernelIntra_DataAddr_T_6 = tail(_io_KernelIntra_DataAddr_T_5, 1) @[PECtrl.scala 213:63]
              io.KernelIntra.DataAddr <= _io_KernelIntra_DataAddr_T_6 @[PECtrl.scala 213:35]
            else :
              node _io_KernelIntra_DataAddr_T_7 = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 216:52]
              node _io_KernelIntra_DataAddr_T_8 = tail(_io_KernelIntra_DataAddr_T_7, 1) @[PECtrl.scala 216:52]
              node _io_KernelIntra_DataAddr_T_9 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 216:74]
              node _io_KernelIntra_DataAddr_T_10 = tail(_io_KernelIntra_DataAddr_T_9, 1) @[PECtrl.scala 216:74]
              node _io_KernelIntra_DataAddr_T_11 = mul(tc, _io_KernelIntra_DataAddr_T_10) @[PECtrl.scala 216:68]
              node _io_KernelIntra_DataAddr_T_12 = add(_io_KernelIntra_DataAddr_T_8, _io_KernelIntra_DataAddr_T_11) @[PECtrl.scala 216:63]
              node _io_KernelIntra_DataAddr_T_13 = tail(_io_KernelIntra_DataAddr_T_12, 1) @[PECtrl.scala 216:63]
              node _io_KernelIntra_DataAddr_T_14 = sub(_io_KernelIntra_DataAddr_T_13, Tj) @[PECtrl.scala 216:81]
              node _io_KernelIntra_DataAddr_T_15 = tail(_io_KernelIntra_DataAddr_T_14, 1) @[PECtrl.scala 216:81]
              io.KernelIntra.DataAddr <= _io_KernelIntra_DataAddr_T_15 @[PECtrl.scala 216:35]
            node _KernelSlotPtr_T_2 = add(io.KernelIntra.DataAddr, Tr) @[PECtrl.scala 219:50]
            node _KernelSlotPtr_T_3 = tail(_KernelSlotPtr_T_2, 1) @[PECtrl.scala 219:50]
            KernelSlotPtr <= _KernelSlotPtr_T_3 @[PECtrl.scala 219:23]
            node _T_25 = add(cntHold, UInt<1>("h1")) @[PECtrl.scala 223:22]
            node _T_26 = tail(_T_25, 1) @[PECtrl.scala 223:22]
            node _T_27 = eq(_T_26, HoldBoundary) @[PECtrl.scala 223:28]
            when _T_27 : @[PECtrl.scala 223:46]
              node _NeuronSlotPtr_T_1 = add(NeuronSlotPtr, UInt<1>("h1")) @[PECtrl.scala 224:42]
              node _NeuronSlotPtr_T_2 = tail(_NeuronSlotPtr_T_1, 1) @[PECtrl.scala 224:42]
              NeuronSlotPtr <= _NeuronSlotPtr_T_2 @[PECtrl.scala 224:25]
              node _cntHold_T = add(cntHold, UInt<1>("h1")) @[PECtrl.scala 225:30]
              node _cntHold_T_1 = tail(_cntHold_T, 1) @[PECtrl.scala 225:30]
              cntHold <= _cntHold_T_1 @[PECtrl.scala 225:19]
            else :
              node _T_28 = add(cntHold, UInt<1>("h1")) @[PECtrl.scala 226:28]
              node _T_29 = tail(_T_28, 1) @[PECtrl.scala 226:28]
              node _T_30 = gt(_T_29, HoldBoundary) @[PECtrl.scala 226:34]
              when _T_30 : @[PECtrl.scala 226:50]
                node _NeuronSlotPtr_T_3 = add(NeuronSlotPtr, UInt<1>("h1")) @[PECtrl.scala 227:42]
                node _NeuronSlotPtr_T_4 = tail(_NeuronSlotPtr_T_3, 1) @[PECtrl.scala 227:42]
                NeuronSlotPtr <= _NeuronSlotPtr_T_4 @[PECtrl.scala 227:25]
                cntHold <= UInt<1>("h0") @[PECtrl.scala 228:19]
              else :
                NeuronSlotPtr <= NeuronSlotPtr @[PECtrl.scala 230:25]
                cntHold <= UInt<1>("h0") @[PECtrl.scala 231:19]
            io.NeuronIntra.DataAddr <= NeuronSlotPtr @[PECtrl.scala 233:33]
            node _cntMac_T = add(cntMac, UInt<1>("h1")) @[PECtrl.scala 235:26]
            node _cntMac_T_1 = tail(_cntMac_T, 1) @[PECtrl.scala 235:26]
            cntMac <= _cntMac_T_1 @[PECtrl.scala 235:16]
            node _T_31 = eq(cntMac, MacCycle) @[PECtrl.scala 238:21]
            when _T_31 : @[PECtrl.scala 238:35]
              macDone <= UInt<1>("h1") @[PECtrl.scala 239:19]
              cntMac <= UInt<1>("h0") @[PECtrl.scala 240:18]

  module PE :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip Enable : UInt<1>, SchePort : { flip Mode : UInt<3>, flip Schedule : UInt<24>, flip ScheduleSize : UInt<7>}, KernelBuf : { Enable : UInt<1>, ReadWrite : UInt<1>, Addr : UInt<10>, flip DataIn : UInt<16>, BankIdx : UInt<4>}, NeuronBuf : { Enable : UInt<1>, ReadWrite : UInt<1>, Addr : UInt<10>, flip DataIn : UInt<16>, BankIdx : UInt<4>}, DataOut : UInt<16>}

    inst kernelintra of IntraBuffer @[PE.scala 42:27]
    kernelintra.clock <= clock
    kernelintra.reset <= reset
    inst neuronintra of IntraBuffer_1 @[PE.scala 43:27]
    neuronintra.clock <= clock
    neuronintra.reset <= reset
    inst PECtrl of PECtrl @[PE.scala 45:22]
    PECtrl.clock <= clock
    PECtrl.reset <= reset
    PECtrl.io.SchePort.ScheduleSize <= io.SchePort.ScheduleSize @[PE.scala 48:22]
    PECtrl.io.SchePort.Schedule <= io.SchePort.Schedule @[PE.scala 48:22]
    PECtrl.io.SchePort.Mode <= io.SchePort.Mode @[PE.scala 48:22]
    io.KernelBuf.BankIdx <= PECtrl.io.KernelBuf.BankIdx @[PE.scala 51:16]
    PECtrl.io.KernelBuf.DataIn <= io.KernelBuf.DataIn @[PE.scala 51:16]
    io.KernelBuf.Addr <= PECtrl.io.KernelBuf.Addr @[PE.scala 51:16]
    io.KernelBuf.ReadWrite <= PECtrl.io.KernelBuf.ReadWrite @[PE.scala 51:16]
    io.KernelBuf.Enable <= PECtrl.io.KernelBuf.Enable @[PE.scala 51:16]
    io.NeuronBuf.BankIdx <= PECtrl.io.NeuronBuf.BankIdx @[PE.scala 52:16]
    PECtrl.io.NeuronBuf.DataIn <= io.NeuronBuf.DataIn @[PE.scala 52:16]
    io.NeuronBuf.Addr <= PECtrl.io.NeuronBuf.Addr @[PE.scala 52:16]
    io.NeuronBuf.ReadWrite <= PECtrl.io.NeuronBuf.ReadWrite @[PE.scala 52:16]
    io.NeuronBuf.Enable <= PECtrl.io.NeuronBuf.Enable @[PE.scala 52:16]
    kernelintra.io.BankIO.Enable <= PECtrl.io.KernelIntra.Enable @[PE.scala 57:32]
    kernelintra.io.BankIO.DataIn <= io.KernelBuf.DataIn @[PE.scala 58:32]
    kernelintra.io.BankIO.DataAddr <= PECtrl.io.KernelIntra.DataAddr @[PE.scala 59:34]
    kernelintra.io.BankIO.ReadWrite <= PECtrl.io.KernelIntra.ReadWrite @[PE.scala 60:35]
    neuronintra.io.BankIO.Enable <= PECtrl.io.NeuronIntra.Enable @[PE.scala 61:32]
    neuronintra.io.BankIO.DataIn <= io.NeuronBuf.DataIn @[PE.scala 62:32]
    neuronintra.io.BankIO.DataAddr <= PECtrl.io.NeuronIntra.DataAddr @[PE.scala 63:34]
    neuronintra.io.BankIO.ReadWrite <= PECtrl.io.NeuronIntra.ReadWrite @[PE.scala 64:35]
    node _T = eq(PECtrl.io.MacEnable, UInt<1>("h1")) @[PE.scala 66:28]
    when _T : @[PE.scala 66:40]
      node _io_DataOut_T = mul(kernelintra.io.BankIO.DataOut, neuronintra.io.BankIO.DataOut) @[PE.scala 67:49]
      io.DataOut <= _io_DataOut_T @[PE.scala 67:16]
    else :
      io.DataOut <= UInt<1>("h0") @[PE.scala 69:16]

