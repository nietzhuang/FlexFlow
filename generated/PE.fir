circuit PE :
  module IntraBuffer :
    input clock : Clock
    input reset : Reset
    output io : { BankIO : { flip DataIn : UInt<16>, flip DataAddr : UInt<7>, flip ReadWrite : UInt<1>, flip Enable : UInt<1>, DataOut : UInt<16>}}

    wire _buffer_WIRE : UInt<16>[128] @[IntraBuffer.scala 20:44]
    _buffer_WIRE[0] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[1] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[2] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[3] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[4] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[5] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[6] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[7] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[8] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[9] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[10] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[11] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[12] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[13] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[14] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[15] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[16] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[17] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[18] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[19] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[20] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[21] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[22] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[23] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[24] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[25] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[26] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[27] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[28] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[29] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[30] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[31] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[32] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[33] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[34] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[35] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[36] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[37] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[38] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[39] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[40] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[41] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[42] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[43] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[44] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[45] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[46] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[47] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[48] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[49] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[50] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[51] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[52] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[53] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[54] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[55] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[56] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[57] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[58] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[59] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[60] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[61] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[62] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[63] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[64] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[65] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[66] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[67] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[68] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[69] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[70] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[71] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[72] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[73] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[74] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[75] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[76] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[77] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[78] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[79] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[80] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[81] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[82] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[83] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[84] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[85] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[86] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[87] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[88] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[89] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[90] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[91] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[92] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[93] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[94] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[95] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[96] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[97] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[98] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[99] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[100] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[101] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[102] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[103] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[104] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[105] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[106] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[107] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[108] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[109] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[110] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[111] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[112] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[113] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[114] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[115] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[116] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[117] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[118] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[119] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[120] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[121] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[122] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[123] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[124] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[125] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[126] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[127] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    reg buffer : UInt<16>[128], clock with :
      reset => (reset, _buffer_WIRE) @[IntraBuffer.scala 20:24]
    io.BankIO.DataOut <= UInt<1>("h0") @[IntraBuffer.scala 22:21]
    node _T = eq(io.BankIO.Enable, UInt<1>("h1")) @[IntraBuffer.scala 23:25]
    when _T : @[IntraBuffer.scala 23:37]
      node _T_1 = eq(io.BankIO.ReadWrite, UInt<1>("h0")) @[IntraBuffer.scala 24:30]
      when _T_1 : @[IntraBuffer.scala 24:43]
        buffer[io.BankIO.DataAddr] <= io.BankIO.DataIn @[IntraBuffer.scala 25:34]
      else :
        io.BankIO.DataOut <= buffer[io.BankIO.DataAddr] @[IntraBuffer.scala 27:25]

  module IntraBuffer_1 :
    input clock : Clock
    input reset : Reset
    output io : { BankIO : { flip DataIn : UInt<16>, flip DataAddr : UInt<7>, flip ReadWrite : UInt<1>, flip Enable : UInt<1>, DataOut : UInt<16>}}

    wire _buffer_WIRE : UInt<16>[128] @[IntraBuffer.scala 20:44]
    _buffer_WIRE[0] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[1] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[2] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[3] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[4] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[5] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[6] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[7] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[8] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[9] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[10] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[11] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[12] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[13] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[14] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[15] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[16] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[17] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[18] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[19] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[20] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[21] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[22] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[23] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[24] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[25] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[26] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[27] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[28] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[29] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[30] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[31] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[32] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[33] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[34] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[35] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[36] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[37] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[38] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[39] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[40] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[41] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[42] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[43] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[44] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[45] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[46] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[47] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[48] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[49] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[50] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[51] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[52] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[53] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[54] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[55] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[56] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[57] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[58] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[59] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[60] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[61] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[62] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[63] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[64] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[65] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[66] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[67] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[68] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[69] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[70] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[71] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[72] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[73] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[74] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[75] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[76] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[77] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[78] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[79] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[80] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[81] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[82] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[83] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[84] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[85] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[86] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[87] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[88] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[89] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[90] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[91] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[92] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[93] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[94] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[95] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[96] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[97] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[98] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[99] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[100] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[101] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[102] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[103] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[104] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[105] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[106] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[107] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[108] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[109] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[110] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[111] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[112] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[113] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[114] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[115] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[116] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[117] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[118] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[119] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[120] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[121] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[122] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[123] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[124] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[125] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[126] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    _buffer_WIRE[127] <= UInt<16>("h0") @[IntraBuffer.scala 20:44]
    reg buffer : UInt<16>[128], clock with :
      reset => (reset, _buffer_WIRE) @[IntraBuffer.scala 20:24]
    io.BankIO.DataOut <= UInt<1>("h0") @[IntraBuffer.scala 22:21]
    node _T = eq(io.BankIO.Enable, UInt<1>("h1")) @[IntraBuffer.scala 23:25]
    when _T : @[IntraBuffer.scala 23:37]
      node _T_1 = eq(io.BankIO.ReadWrite, UInt<1>("h0")) @[IntraBuffer.scala 24:30]
      when _T_1 : @[IntraBuffer.scala 24:43]
        buffer[io.BankIO.DataAddr] <= io.BankIO.DataIn @[IntraBuffer.scala 25:34]
      else :
        io.BankIO.DataOut <= buffer[io.BankIO.DataAddr] @[IntraBuffer.scala 27:25]

  module PECtrl :
    input clock : Clock
    input reset : Reset
    output io : { flip Mode : UInt<3>, flip Schedule : UInt<24>, flip ScheduleSize : UInt<7>, KernelAddr : UInt<10>, KernelBankIdx : UInt<4>, KernelBufRW : UInt<1>, KernelBufEn : UInt<1>, NeuronAddr : UInt<10>, NeuronBankIdx : UInt<4>, NeuronBufRW : UInt<1>, NeuronBufEn : UInt<1>, KernelIntraAddr : UInt<7>, KernelIntraRW : UInt<1>, NeuronIntraAddr : UInt<7>, NeuronIntraRW : UInt<1>, MacEnable : UInt<1>}

    reg stateReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[PECtrl.scala 43:25]
    node Tm = bits(io.Schedule, 23, 20) @[PECtrl.scala 47:23]
    node Tn = bits(io.Schedule, 19, 16) @[PECtrl.scala 48:23]
    node Ti = bits(io.Schedule, 15, 12) @[PECtrl.scala 49:23]
    node Tj = bits(io.Schedule, 11, 8) @[PECtrl.scala 50:23]
    node Tr = bits(io.Schedule, 7, 4) @[PECtrl.scala 51:23]
    node Tc = bits(io.Schedule, 3, 0) @[PECtrl.scala 52:23]
    node _GroupRowIdx_T = mul(Tr, Tc) @[PECtrl.scala 54:36]
    node GroupRowIdx = div(UInt<1>("h0"), _GroupRowIdx_T) @[PECtrl.scala 54:30]
    node _GroupColIdx_T = mul(Ti, Tj) @[PECtrl.scala 55:36]
    node GroupColIdx = div(UInt<1>("h0"), _GroupColIdx_T) @[PECtrl.scala 55:30]
    node _Group_T = cat(GroupRowIdx, GroupColIdx) @[Cat.scala 30:58]
    reg Group : UInt, clock with :
      reset => (reset, _Group_T) @[PECtrl.scala 56:22]
    node _KernelBoundary_T = mul(Ti, Tj) @[PECtrl.scala 57:33]
    node _KernelBoundary_T_1 = mul(Tr, Tc) @[PECtrl.scala 57:44]
    node KernelBoundary_result = div(_KernelBoundary_T, _KernelBoundary_T_1) @[Util.scala 8:22]
    node _KernelBoundary_T_2 = mul(_KernelBoundary_T_1, KernelBoundary_result) @[Util.scala 9:13]
    node _KernelBoundary_T_3 = add(KernelBoundary_result, UInt<1>("h1")) @[Util.scala 12:14]
    node KernelBoundary = tail(_KernelBoundary_T_3, 1) @[Util.scala 12:14]
    node _NeuronBoundary_T = mul(Tr, Tc) @[PECtrl.scala 58:41]
    node NeuronBoundary = div(io.ScheduleSize, _NeuronBoundary_T) @[PECtrl.scala 58:35]
    node HoldBoundary = div(Tj, Tc) @[PECtrl.scala 59:25]
    node _MacCycle_T = sub(io.ScheduleSize, Tj) @[PECtrl.scala 60:35]
    node _MacCycle_T_1 = tail(_MacCycle_T, 1) @[PECtrl.scala 60:35]
    node MacCycle_result = div(_MacCycle_T_1, Tc) @[Util.scala 8:22]
    node _MacCycle_T_2 = mul(Tc, MacCycle_result) @[Util.scala 9:13]
    node _MacCycle_T_3 = add(MacCycle_result, UInt<1>("h1")) @[Util.scala 12:14]
    node MacCycle = tail(_MacCycle_T_3, 1) @[Util.scala 12:14]
    node _tm_T = div(UInt<5>("h10"), Tm) @[PECtrl.scala 62:34]
    node tm = div(UInt<1>("h0"), _tm_T) @[PECtrl.scala 62:21]
    node _tn_T = div(UInt<5>("h10"), Tn) @[PECtrl.scala 63:34]
    node tn = div(UInt<1>("h0"), _tn_T) @[PECtrl.scala 63:21]
    node _tj_T = mul(tn, Ti) @[PECtrl.scala 64:27]
    node _tj_T_1 = mul(_tj_T, Tj) @[PECtrl.scala 64:32]
    node _tj_T_2 = div(_tj_T_1, Tj) @[PECtrl.scala 64:38]
    node _tj_T_3 = sub(UInt<1>("h0"), _tj_T_2) @[PECtrl.scala 64:21]
    node tj = tail(_tj_T_3, 1) @[PECtrl.scala 64:21]
    node _ti_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PECtrl.scala 65:23]
    node _ti_T_1 = tail(_ti_T, 1) @[PECtrl.scala 65:23]
    node _ti_T_2 = mul(tn, Ti) @[PECtrl.scala 65:35]
    node _ti_T_3 = mul(_ti_T_2, Tj) @[PECtrl.scala 65:40]
    node _ti_T_4 = sub(_ti_T_1, _ti_T_3) @[PECtrl.scala 65:30]
    node _ti_T_5 = tail(_ti_T_4, 1) @[PECtrl.scala 65:30]
    node _ti_T_6 = mul(tj, Ti) @[PECtrl.scala 65:50]
    node _ti_T_7 = sub(_ti_T_5, _ti_T_6) @[PECtrl.scala 65:45]
    node _ti_T_8 = tail(_ti_T_7, 1) @[PECtrl.scala 65:45]
    node ti = div(_ti_T_8, Ti) @[PECtrl.scala 65:56]
    node _tc_T = mul(tm, Tc) @[PECtrl.scala 66:27]
    node _tc_T_1 = mul(_tc_T, Tr) @[PECtrl.scala 66:32]
    node _tc_T_2 = div(_tc_T_1, Tc) @[PECtrl.scala 66:38]
    node _tc_T_3 = sub(UInt<1>("h0"), _tc_T_2) @[PECtrl.scala 66:21]
    node tc = tail(_tc_T_3, 1) @[PECtrl.scala 66:21]
    node _tr_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PECtrl.scala 67:23]
    node _tr_T_1 = tail(_tr_T, 1) @[PECtrl.scala 67:23]
    node _tr_T_2 = mul(tm, Tc) @[PECtrl.scala 67:35]
    node _tr_T_3 = mul(_tr_T_2, Tr) @[PECtrl.scala 67:40]
    node _tr_T_4 = sub(_tr_T_1, _tr_T_3) @[PECtrl.scala 67:30]
    node _tr_T_5 = tail(_tr_T_4, 1) @[PECtrl.scala 67:30]
    node _tr_T_6 = mul(tc, Tr) @[PECtrl.scala 67:50]
    node _tr_T_7 = sub(_tr_T_5, _tr_T_6) @[PECtrl.scala 67:45]
    node _tr_T_8 = tail(_tr_T_7, 1) @[PECtrl.scala 67:45]
    node tr = div(_tr_T_8, Tr) @[PECtrl.scala 67:56]
    reg cntMac : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 69:23]
    reg KernelSlotPtr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 70:30]
    reg cntKBufAddr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 71:28]
    reg cntKBufBank : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 72:28]
    reg NeuronSlotPtr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 73:30]
    reg cntNBufAddr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 74:28]
    reg cntNBufBank : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 75:28]
    node _cntHoldBase_T = gt(tc, UInt<1>("h0")) @[PECtrl.scala 76:28]
    node _cntHoldBase_T_1 = div(tj, HoldBoundary) @[PECtrl.scala 77:37]
    node _cntHoldBase_T_2 = rem(_cntHoldBase_T_1, HoldBoundary) @[PECtrl.scala 77:53]
    reg cntHoldBase_REG : UInt, clock with :
      reset => (reset, _cntHoldBase_T_2) @[PECtrl.scala 77:32]
    node _cntHoldBase_T_3 = lt(tj, tc) @[PECtrl.scala 78:37]
    node _cntHoldBase_T_4 = sub(Tj, tc) @[PECtrl.scala 78:63]
    node _cntHoldBase_T_5 = tail(_cntHoldBase_T_4, 1) @[PECtrl.scala 78:63]
    node _cntHoldBase_T_6 = geq(tj, _cntHoldBase_T_5) @[PECtrl.scala 78:56]
    node _cntHoldBase_T_7 = add(_cntHoldBase_T_3, _cntHoldBase_T_6) @[PECtrl.scala 78:50]
    node _cntHoldBase_T_8 = tail(_cntHoldBase_T_7, 1) @[PECtrl.scala 78:50]
    reg cntHoldBase_REG_1 : UInt, clock with :
      reset => (reset, _cntHoldBase_T_8) @[PECtrl.scala 78:32]
    node cntHoldBase = mux(_cntHoldBase_T, cntHoldBase_REG, cntHoldBase_REG_1) @[PECtrl.scala 76:24]
    reg cntHold : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 79:24]
    node Load2 = eq(io.Mode, UInt<2>("h2")) @[PECtrl.scala 82:24]
    reg KernelReadDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 83:31]
    reg NeuronReadDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 84:31]
    node Load2Done = or(KernelReadDone, NeuronReadDone) @[PECtrl.scala 85:35]
    reg macDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 86:24]
    node _T = eq(UInt<2>("h1"), stateReg) @[PECtrl.scala 88:21]
    when _T : @[PECtrl.scala 88:21]
      node _T_1 = eq(Load2, UInt<1>("h1")) @[PECtrl.scala 90:18]
      when _T_1 : @[PECtrl.scala 90:30]
        stateReg <= UInt<2>("h2") @[PECtrl.scala 91:18]
      else :
        stateReg <= UInt<2>("h1") @[PECtrl.scala 93:18]
    else :
      node _T_2 = eq(UInt<2>("h2"), stateReg) @[PECtrl.scala 88:21]
      when _T_2 : @[PECtrl.scala 88:21]
        node _T_3 = eq(Load2Done, UInt<1>("h1")) @[PECtrl.scala 97:22]
        when _T_3 : @[PECtrl.scala 97:34]
          stateReg <= UInt<2>("h3") @[PECtrl.scala 98:18]
        else :
          stateReg <= UInt<2>("h1") @[PECtrl.scala 100:18]
      else :
        node _T_4 = eq(UInt<2>("h3"), stateReg) @[PECtrl.scala 88:21]
        when _T_4 : @[PECtrl.scala 88:21]
          node _T_5 = eq(macDone, UInt<1>("h1")) @[PECtrl.scala 104:20]
          when _T_5 : @[PECtrl.scala 104:32]
            stateReg <= UInt<2>("h1") @[PECtrl.scala 105:18]
          else :
            stateReg <= UInt<2>("h3") @[PECtrl.scala 107:18]
    io.KernelAddr <= UInt<1>("h0") @[PECtrl.scala 112:17]
    io.KernelBankIdx <= UInt<1>("h0") @[PECtrl.scala 113:20]
    io.KernelBufRW <= UInt<1>("h0") @[PECtrl.scala 114:18]
    io.KernelBufEn <= UInt<1>("h0") @[PECtrl.scala 115:18]
    io.KernelIntraAddr <= UInt<1>("h0") @[PECtrl.scala 116:22]
    io.KernelIntraRW <= UInt<1>("h0") @[PECtrl.scala 117:20]
    io.NeuronAddr <= UInt<1>("h0") @[PECtrl.scala 118:17]
    io.NeuronBankIdx <= UInt<1>("h0") @[PECtrl.scala 119:20]
    io.NeuronBufRW <= UInt<1>("h0") @[PECtrl.scala 120:18]
    io.NeuronBufEn <= UInt<1>("h0") @[PECtrl.scala 121:18]
    io.NeuronIntraAddr <= UInt<1>("h0") @[PECtrl.scala 122:22]
    io.NeuronIntraRW <= UInt<1>("h0") @[PECtrl.scala 123:20]
    io.MacEnable <= UInt<1>("h0") @[PECtrl.scala 124:16]
    node _T_6 = eq(UInt<2>("h1"), stateReg) @[PECtrl.scala 127:20]
    when _T_6 : @[PECtrl.scala 127:20]
      io.KernelAddr <= UInt<1>("h0") @[PECtrl.scala 129:21]
      io.KernelBankIdx <= UInt<1>("h0") @[PECtrl.scala 130:24]
      io.KernelBufRW <= UInt<1>("h0") @[PECtrl.scala 131:22]
      io.KernelBufEn <= UInt<1>("h0") @[PECtrl.scala 132:22]
      io.KernelIntraAddr <= UInt<1>("h0") @[PECtrl.scala 133:26]
      io.KernelIntraRW <= UInt<1>("h0") @[PECtrl.scala 134:24]
      io.NeuronAddr <= UInt<1>("h0") @[PECtrl.scala 135:21]
      io.NeuronBankIdx <= UInt<1>("h0") @[PECtrl.scala 136:24]
      io.NeuronBufRW <= UInt<1>("h0") @[PECtrl.scala 137:22]
      io.NeuronBufEn <= UInt<1>("h0") @[PECtrl.scala 138:22]
      io.NeuronIntraAddr <= UInt<1>("h0") @[PECtrl.scala 139:26]
      io.NeuronIntraRW <= UInt<1>("h0") @[PECtrl.scala 140:24]
      KernelReadDone <= UInt<1>("h0") @[PECtrl.scala 141:22]
      NeuronReadDone <= UInt<1>("h0") @[PECtrl.scala 142:22]
      macDone <= UInt<1>("h0") @[PECtrl.scala 143:15]
    else :
      node _T_7 = eq(UInt<2>("h2"), stateReg) @[PECtrl.scala 127:20]
      when _T_7 : @[PECtrl.scala 127:20]
        io.KernelBufRW <= UInt<1>("h0") @[PECtrl.scala 146:22]
        io.KernelBufEn <= UInt<1>("h1") @[PECtrl.scala 147:22]
        io.KernelIntraRW <= UInt<1>("h1") @[PECtrl.scala 148:24]
        io.NeuronBufRW <= UInt<1>("h0") @[PECtrl.scala 149:22]
        io.NeuronBufEn <= UInt<1>("h1") @[PECtrl.scala 150:22]
        io.NeuronIntraRW <= UInt<1>("h1") @[PECtrl.scala 151:24]
        node _T_8 = eq(KernelReadDone, UInt<1>("h0")) @[PECtrl.scala 154:27]
        when _T_8 : @[PECtrl.scala 154:40]
          node _T_9 = lt(cntKBufAddr, KernelBoundary) @[PECtrl.scala 155:26]
          when _T_9 : @[PECtrl.scala 155:44]
            io.KernelAddr <= cntKBufAddr @[PECtrl.scala 156:25]
            io.KernelBankIdx <= cntKBufBank @[PECtrl.scala 157:28]
            io.KernelIntraAddr <= KernelSlotPtr @[PECtrl.scala 158:30]
            node _cntKBufAddr_T = add(cntKBufAddr, UInt<1>("h1")) @[PECtrl.scala 160:38]
            node _cntKBufAddr_T_1 = tail(_cntKBufAddr_T, 1) @[PECtrl.scala 160:38]
            cntKBufAddr <= _cntKBufAddr_T_1 @[PECtrl.scala 160:23]
          else :
            io.KernelAddr <= UInt<1>("h0") @[PECtrl.scala 162:25]
            node _io_KernelBankIdx_T = add(cntKBufBank, UInt<1>("h1")) @[PECtrl.scala 163:43]
            node _io_KernelBankIdx_T_1 = tail(_io_KernelBankIdx_T, 1) @[PECtrl.scala 163:43]
            io.KernelBankIdx <= _io_KernelBankIdx_T_1 @[PECtrl.scala 163:28]
            io.KernelIntraAddr <= KernelSlotPtr @[PECtrl.scala 164:30]
            cntKBufAddr <= UInt<1>("h0") @[PECtrl.scala 166:23]
            node _cntKBufBank_T = add(cntKBufBank, UInt<1>("h1")) @[PECtrl.scala 167:38]
            node _cntKBufBank_T_1 = tail(_cntKBufBank_T, 1) @[PECtrl.scala 167:38]
            cntKBufBank <= _cntKBufBank_T_1 @[PECtrl.scala 167:23]
          node _KernelSlotPtr_T = add(KernelSlotPtr, UInt<1>("h1")) @[PECtrl.scala 169:40]
          node _KernelSlotPtr_T_1 = tail(_KernelSlotPtr_T, 1) @[PECtrl.scala 169:40]
          KernelSlotPtr <= _KernelSlotPtr_T_1 @[PECtrl.scala 169:23]
          node _T_10 = mul(Ti, Tj) @[PECtrl.scala 172:35]
          node _T_11 = eq(KernelSlotPtr, _T_10) @[PECtrl.scala 172:28]
          when _T_11 : @[PECtrl.scala 172:41]
            KernelReadDone <= UInt<1>("h1") @[PECtrl.scala 174:26]
            KernelSlotPtr <= UInt<1>("h0") @[PECtrl.scala 175:25]
        node _T_12 = eq(NeuronReadDone, UInt<1>("h0")) @[PECtrl.scala 180:27]
        when _T_12 : @[PECtrl.scala 180:40]
          node _T_13 = lt(cntNBufAddr, NeuronBoundary) @[PECtrl.scala 181:26]
          when _T_13 : @[PECtrl.scala 181:44]
            io.NeuronAddr <= cntNBufAddr @[PECtrl.scala 182:25]
            io.NeuronBankIdx <= cntNBufBank @[PECtrl.scala 183:28]
            io.NeuronIntraAddr <= NeuronSlotPtr @[PECtrl.scala 184:30]
            node _cntNBufAddr_T = add(cntNBufAddr, UInt<1>("h1")) @[PECtrl.scala 186:38]
            node _cntNBufAddr_T_1 = tail(_cntNBufAddr_T, 1) @[PECtrl.scala 186:38]
            cntNBufAddr <= _cntNBufAddr_T_1 @[PECtrl.scala 186:23]
          NeuronSlotPtr <= cntNBufAddr @[PECtrl.scala 191:23]
          node _T_14 = eq(NeuronSlotPtr, NeuronBoundary) @[PECtrl.scala 192:28]
          when _T_14 : @[PECtrl.scala 192:48]
            NeuronReadDone <= UInt<1>("h1") @[PECtrl.scala 193:26]
            NeuronSlotPtr <= UInt<1>("h0") @[PECtrl.scala 194:25]
      else :
        node _T_15 = eq(UInt<2>("h3"), stateReg) @[PECtrl.scala 127:20]
        when _T_15 : @[PECtrl.scala 127:20]
          io.KernelBufEn <= UInt<1>("h0") @[PECtrl.scala 199:22]
          io.KernelIntraRW <= UInt<1>("h0") @[PECtrl.scala 200:24]
          io.NeuronBufEn <= UInt<1>("h0") @[PECtrl.scala 201:22]
          io.NeuronIntraRW <= UInt<1>("h0") @[PECtrl.scala 202:24]
          io.MacEnable <= UInt<1>("h1") @[PECtrl.scala 203:20]
          cntHold <= cntHoldBase @[PECtrl.scala 204:15]
          node _NeuronSlotPtr_T = lt(tj, tc) @[PECtrl.scala 205:28]
          NeuronSlotPtr <= _NeuronSlotPtr_T @[PECtrl.scala 205:21]
          node _T_16 = eq(macDone, UInt<1>("h0")) @[PECtrl.scala 206:20]
          when _T_16 : @[PECtrl.scala 206:33]
            node _T_17 = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 208:29]
            node _T_18 = tail(_T_17, 1) @[PECtrl.scala 208:29]
            node _T_19 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 208:51]
            node _T_20 = tail(_T_19, 1) @[PECtrl.scala 208:51]
            node _T_21 = mul(tc, _T_20) @[PECtrl.scala 208:45]
            node _T_22 = add(_T_18, _T_21) @[PECtrl.scala 208:40]
            node _T_23 = tail(_T_22, 1) @[PECtrl.scala 208:40]
            node _T_24 = lt(_T_23, Tj) @[PECtrl.scala 208:59]
            when _T_24 : @[PECtrl.scala 208:65]
              node _io_KernelIntraAddr_T = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 209:47]
              node _io_KernelIntraAddr_T_1 = tail(_io_KernelIntraAddr_T, 1) @[PECtrl.scala 209:47]
              node _io_KernelIntraAddr_T_2 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 209:69]
              node _io_KernelIntraAddr_T_3 = tail(_io_KernelIntraAddr_T_2, 1) @[PECtrl.scala 209:69]
              node _io_KernelIntraAddr_T_4 = mul(tc, _io_KernelIntraAddr_T_3) @[PECtrl.scala 209:63]
              node _io_KernelIntraAddr_T_5 = add(_io_KernelIntraAddr_T_1, _io_KernelIntraAddr_T_4) @[PECtrl.scala 209:58]
              node _io_KernelIntraAddr_T_6 = tail(_io_KernelIntraAddr_T_5, 1) @[PECtrl.scala 209:58]
              io.KernelIntraAddr <= _io_KernelIntraAddr_T_6 @[PECtrl.scala 209:30]
            else :
              node _io_KernelIntraAddr_T_7 = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 212:47]
              node _io_KernelIntraAddr_T_8 = tail(_io_KernelIntraAddr_T_7, 1) @[PECtrl.scala 212:47]
              node _io_KernelIntraAddr_T_9 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 212:69]
              node _io_KernelIntraAddr_T_10 = tail(_io_KernelIntraAddr_T_9, 1) @[PECtrl.scala 212:69]
              node _io_KernelIntraAddr_T_11 = mul(tc, _io_KernelIntraAddr_T_10) @[PECtrl.scala 212:63]
              node _io_KernelIntraAddr_T_12 = add(_io_KernelIntraAddr_T_8, _io_KernelIntraAddr_T_11) @[PECtrl.scala 212:58]
              node _io_KernelIntraAddr_T_13 = tail(_io_KernelIntraAddr_T_12, 1) @[PECtrl.scala 212:58]
              node _io_KernelIntraAddr_T_14 = sub(_io_KernelIntraAddr_T_13, Tj) @[PECtrl.scala 212:76]
              node _io_KernelIntraAddr_T_15 = tail(_io_KernelIntraAddr_T_14, 1) @[PECtrl.scala 212:76]
              io.KernelIntraAddr <= _io_KernelIntraAddr_T_15 @[PECtrl.scala 212:30]
            node _KernelSlotPtr_T_2 = add(io.KernelIntraAddr, Tr) @[PECtrl.scala 215:45]
            node _KernelSlotPtr_T_3 = tail(_KernelSlotPtr_T_2, 1) @[PECtrl.scala 215:45]
            KernelSlotPtr <= _KernelSlotPtr_T_3 @[PECtrl.scala 215:23]
            node _T_25 = add(cntHold, UInt<1>("h1")) @[PECtrl.scala 219:22]
            node _T_26 = tail(_T_25, 1) @[PECtrl.scala 219:22]
            node _T_27 = eq(_T_26, HoldBoundary) @[PECtrl.scala 219:28]
            when _T_27 : @[PECtrl.scala 219:46]
              node _NeuronSlotPtr_T_1 = add(NeuronSlotPtr, UInt<1>("h1")) @[PECtrl.scala 220:42]
              node _NeuronSlotPtr_T_2 = tail(_NeuronSlotPtr_T_1, 1) @[PECtrl.scala 220:42]
              NeuronSlotPtr <= _NeuronSlotPtr_T_2 @[PECtrl.scala 220:25]
              node _cntHold_T = add(cntHold, UInt<1>("h1")) @[PECtrl.scala 221:30]
              node _cntHold_T_1 = tail(_cntHold_T, 1) @[PECtrl.scala 221:30]
              cntHold <= _cntHold_T_1 @[PECtrl.scala 221:19]
            else :
              node _T_28 = add(cntHold, UInt<1>("h1")) @[PECtrl.scala 222:28]
              node _T_29 = tail(_T_28, 1) @[PECtrl.scala 222:28]
              node _T_30 = gt(_T_29, HoldBoundary) @[PECtrl.scala 222:34]
              when _T_30 : @[PECtrl.scala 222:50]
                node _NeuronSlotPtr_T_3 = add(NeuronSlotPtr, UInt<1>("h1")) @[PECtrl.scala 223:42]
                node _NeuronSlotPtr_T_4 = tail(_NeuronSlotPtr_T_3, 1) @[PECtrl.scala 223:42]
                NeuronSlotPtr <= _NeuronSlotPtr_T_4 @[PECtrl.scala 223:25]
                cntHold <= UInt<1>("h0") @[PECtrl.scala 224:19]
              else :
                NeuronSlotPtr <= NeuronSlotPtr @[PECtrl.scala 226:25]
                cntHold <= UInt<1>("h0") @[PECtrl.scala 227:19]
            io.NeuronIntraAddr <= NeuronSlotPtr @[PECtrl.scala 229:28]
            node _cntMac_T = add(cntMac, UInt<1>("h1")) @[PECtrl.scala 231:26]
            node _cntMac_T_1 = tail(_cntMac_T, 1) @[PECtrl.scala 231:26]
            cntMac <= _cntMac_T_1 @[PECtrl.scala 231:16]
            node _T_31 = eq(cntMac, MacCycle) @[PECtrl.scala 234:21]
            when _T_31 : @[PECtrl.scala 234:35]
              macDone <= UInt<1>("h1") @[PECtrl.scala 235:19]
              cntMac <= UInt<1>("h0") @[PECtrl.scala 236:18]

  module PE :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip Enable : UInt<1>, flip Mode : UInt<3>, flip Schedule : UInt<24>, flip ScheduleSize : UInt<7>, KernelAddr : UInt<10>, KernelBankIdx : UInt<4>, flip KernelDataIn : UInt<16>, KernelBufRW : UInt<1>, KernelBufEn : UInt<1>, NeuronAddr : UInt<10>, NeuronBankIdx : UInt<4>, flip NeuronDataIn : UInt<16>, NeuronBufRW : UInt<1>, NeuronBufEn : UInt<1>, DataOut : UInt<16>}

    inst kernelintra of IntraBuffer @[PE.scala 35:27]
    kernelintra.clock <= clock
    kernelintra.reset <= reset
    inst neuronintra of IntraBuffer_1 @[PE.scala 36:27]
    neuronintra.clock <= clock
    neuronintra.reset <= reset
    inst PECtrl of PECtrl @[PE.scala 38:22]
    PECtrl.clock <= clock
    PECtrl.reset <= reset
    PECtrl.io.Mode <= io.Mode @[PE.scala 41:18]
    PECtrl.io.Schedule <= io.Schedule @[PE.scala 42:22]
    PECtrl.io.ScheduleSize <= io.ScheduleSize @[PE.scala 43:26]
    io.KernelAddr <= PECtrl.io.KernelAddr @[PE.scala 46:17]
    io.KernelBankIdx <= PECtrl.io.KernelBankIdx @[PE.scala 47:20]
    io.KernelBufRW <= PECtrl.io.KernelBufRW @[PE.scala 48:18]
    io.KernelBufEn <= PECtrl.io.KernelBufEn @[PE.scala 49:18]
    io.NeuronAddr <= PECtrl.io.NeuronAddr @[PE.scala 50:17]
    io.NeuronBankIdx <= PECtrl.io.NeuronBankIdx @[PE.scala 51:20]
    io.NeuronBufRW <= PECtrl.io.NeuronBufRW @[PE.scala 52:18]
    io.NeuronBufEn <= PECtrl.io.NeuronBufEn @[PE.scala 53:18]
    kernelintra.io.BankIO.Enable <= io.Enable @[PE.scala 56:32]
    kernelintra.io.BankIO.DataIn <= io.KernelDataIn @[PE.scala 57:32]
    kernelintra.io.BankIO.DataAddr <= PECtrl.io.KernelIntraAddr @[PE.scala 58:34]
    kernelintra.io.BankIO.ReadWrite <= PECtrl.io.KernelIntraRW @[PE.scala 59:35]
    neuronintra.io.BankIO.Enable <= io.Enable @[PE.scala 60:32]
    neuronintra.io.BankIO.DataIn <= io.NeuronDataIn @[PE.scala 61:32]
    neuronintra.io.BankIO.DataAddr <= PECtrl.io.NeuronIntraAddr @[PE.scala 62:34]
    neuronintra.io.BankIO.ReadWrite <= PECtrl.io.NeuronIntraRW @[PE.scala 63:35]
    node _T = eq(PECtrl.io.MacEnable, UInt<1>("h1")) @[PE.scala 65:28]
    when _T : @[PE.scala 65:40]
      node _io_DataOut_T = mul(kernelintra.io.BankIO.DataOut, neuronintra.io.BankIO.DataOut) @[PE.scala 66:49]
      io.DataOut <= _io_DataOut_T @[PE.scala 66:16]
    else :
      io.DataOut <= UInt<1>("h0") @[PE.scala 68:16]

