circuit PECtrl :
  module PECtrl :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip Mode : UInt<3>, flip Schedule : UInt<24>, flip ScheduleSize : UInt<7>, KernelAddr : UInt<10>, KernelBankIdx : UInt<4>, KernelBufRW : UInt<1>, KernelBufEn : UInt<1>, NeuronAddr : UInt<10>, NeuronBankIdx : UInt<4>, NeuronBufRW : UInt<1>, NeuronBufEn : UInt<1>, KernelIntraAddr : UInt<7>, KernelIntraRW : UInt<1>, NeuronIntraAddr : UInt<7>, NeuronIntraRW : UInt<1>, MacEnable : UInt<1>}

    reg stateReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[PECtrl.scala 41:25]
    node Tm = bits(io.Schedule, 23, 20) @[PECtrl.scala 45:23]
    node Tn = bits(io.Schedule, 19, 16) @[PECtrl.scala 46:23]
    node Ti = bits(io.Schedule, 15, 12) @[PECtrl.scala 47:23]
    node Tj = bits(io.Schedule, 11, 8) @[PECtrl.scala 48:23]
    node Tr = bits(io.Schedule, 7, 4) @[PECtrl.scala 49:23]
    node Tc = bits(io.Schedule, 3, 0) @[PECtrl.scala 50:23]
    node _GroupRowIdx_T = mul(Tr, Tc) @[PECtrl.scala 52:36]
    node GroupRowIdx = div(UInt<1>("h0"), _GroupRowIdx_T) @[PECtrl.scala 52:30]
    node _GroupColIdx_T = mul(Ti, Tj) @[PECtrl.scala 53:36]
    node GroupColIdx = div(UInt<1>("h0"), _GroupColIdx_T) @[PECtrl.scala 53:30]
    node _Group_T = cat(GroupRowIdx, GroupColIdx) @[Cat.scala 30:58]
    reg Group : UInt, clock with :
      reset => (reset, _Group_T) @[PECtrl.scala 54:22]
    node _KernelBoundary_T = mul(Ti, Tj) @[PECtrl.scala 56:28]
    node _KernelBoundary_T_1 = mul(Tr, Tc) @[PECtrl.scala 56:40]
    node KernelBoundary = div(_KernelBoundary_T, _KernelBoundary_T_1) @[PECtrl.scala 56:34]
    node _NeuronBoundary_T = mul(Tr, Tc) @[PECtrl.scala 57:41]
    node NeuronBoundary = div(io.ScheduleSize, _NeuronBoundary_T) @[PECtrl.scala 57:35]
    node _tm_T = div(UInt<5>("h10"), Tm) @[PECtrl.scala 59:34]
    node tm = div(UInt<1>("h0"), _tm_T) @[PECtrl.scala 59:21]
    node _tn_T = div(UInt<5>("h10"), Tn) @[PECtrl.scala 60:34]
    node tn = div(UInt<1>("h0"), _tn_T) @[PECtrl.scala 60:21]
    node _tj_T = mul(tn, Ti) @[PECtrl.scala 61:27]
    node _tj_T_1 = mul(_tj_T, Tj) @[PECtrl.scala 61:32]
    node _tj_T_2 = div(_tj_T_1, Tj) @[PECtrl.scala 61:38]
    node _tj_T_3 = sub(UInt<1>("h0"), _tj_T_2) @[PECtrl.scala 61:21]
    node tj = tail(_tj_T_3, 1) @[PECtrl.scala 61:21]
    node _ti_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PECtrl.scala 62:23]
    node _ti_T_1 = tail(_ti_T, 1) @[PECtrl.scala 62:23]
    node _ti_T_2 = mul(tn, Ti) @[PECtrl.scala 62:35]
    node _ti_T_3 = mul(_ti_T_2, Tj) @[PECtrl.scala 62:40]
    node _ti_T_4 = sub(_ti_T_1, _ti_T_3) @[PECtrl.scala 62:30]
    node _ti_T_5 = tail(_ti_T_4, 1) @[PECtrl.scala 62:30]
    node _ti_T_6 = mul(tj, Ti) @[PECtrl.scala 62:50]
    node _ti_T_7 = sub(_ti_T_5, _ti_T_6) @[PECtrl.scala 62:45]
    node _ti_T_8 = tail(_ti_T_7, 1) @[PECtrl.scala 62:45]
    node ti = div(_ti_T_8, Ti) @[PECtrl.scala 62:56]
    node _tc_T = mul(tm, Tc) @[PECtrl.scala 63:27]
    node _tc_T_1 = mul(_tc_T, Tr) @[PECtrl.scala 63:32]
    node _tc_T_2 = div(_tc_T_1, Tc) @[PECtrl.scala 63:38]
    node _tc_T_3 = sub(UInt<1>("h0"), _tc_T_2) @[PECtrl.scala 63:21]
    node tc = tail(_tc_T_3, 1) @[PECtrl.scala 63:21]
    node _tr_T = add(UInt<1>("h0"), UInt<1>("h1")) @[PECtrl.scala 64:23]
    node _tr_T_1 = tail(_tr_T, 1) @[PECtrl.scala 64:23]
    node _tr_T_2 = mul(tm, Tc) @[PECtrl.scala 64:35]
    node _tr_T_3 = mul(_tr_T_2, Tr) @[PECtrl.scala 64:40]
    node _tr_T_4 = sub(_tr_T_1, _tr_T_3) @[PECtrl.scala 64:30]
    node _tr_T_5 = tail(_tr_T_4, 1) @[PECtrl.scala 64:30]
    node _tr_T_6 = mul(tc, Tr) @[PECtrl.scala 64:50]
    node _tr_T_7 = sub(_tr_T_5, _tr_T_6) @[PECtrl.scala 64:45]
    node _tr_T_8 = tail(_tr_T_7, 1) @[PECtrl.scala 64:45]
    node tr = div(_tr_T_8, Tr) @[PECtrl.scala 64:56]
    reg cntMac : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 66:23]
    reg KernelSlotPtr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 67:30]
    reg cntKBufAddr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 68:28]
    reg cntKBufBank : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 69:28]
    reg NeuronSlotPtr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 70:30]
    reg cntNBufAddr : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 71:28]
    reg cntNBufBank : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 72:28]
    node Load2 = eq(io.Mode, UInt<2>("h2")) @[PECtrl.scala 75:24]
    reg KernelReadDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 76:31]
    reg NeuronReadDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 77:31]
    node Load2Done = or(KernelReadDone, NeuronReadDone) @[PECtrl.scala 78:35]
    reg macDone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PECtrl.scala 79:24]
    node _T = eq(UInt<2>("h1"), stateReg) @[PECtrl.scala 81:21]
    when _T : @[PECtrl.scala 81:21]
      node _T_1 = eq(Load2, UInt<1>("h1")) @[PECtrl.scala 83:18]
      when _T_1 : @[PECtrl.scala 83:30]
        stateReg <= UInt<2>("h2") @[PECtrl.scala 84:18]
      else :
        stateReg <= UInt<2>("h1") @[PECtrl.scala 86:18]
    else :
      node _T_2 = eq(UInt<2>("h2"), stateReg) @[PECtrl.scala 81:21]
      when _T_2 : @[PECtrl.scala 81:21]
        node _T_3 = eq(Load2Done, UInt<1>("h1")) @[PECtrl.scala 90:22]
        when _T_3 : @[PECtrl.scala 90:34]
          stateReg <= UInt<2>("h3") @[PECtrl.scala 91:18]
        else :
          stateReg <= UInt<2>("h1") @[PECtrl.scala 93:18]
      else :
        node _T_4 = eq(UInt<2>("h3"), stateReg) @[PECtrl.scala 81:21]
        when _T_4 : @[PECtrl.scala 81:21]
          node _T_5 = eq(macDone, UInt<1>("h1")) @[PECtrl.scala 97:20]
          when _T_5 : @[PECtrl.scala 97:32]
            stateReg <= UInt<2>("h1") @[PECtrl.scala 98:18]
          else :
            stateReg <= UInt<2>("h3") @[PECtrl.scala 100:18]
    io.KernelAddr <= UInt<1>("h0") @[PECtrl.scala 105:17]
    io.KernelBankIdx <= UInt<1>("h0") @[PECtrl.scala 106:20]
    io.KernelBufRW <= UInt<1>("h0") @[PECtrl.scala 107:18]
    io.KernelBufEn <= UInt<1>("h0") @[PECtrl.scala 108:18]
    io.KernelIntraAddr <= UInt<1>("h0") @[PECtrl.scala 109:22]
    io.KernelIntraRW <= UInt<1>("h0") @[PECtrl.scala 110:20]
    io.NeuronAddr <= UInt<1>("h0") @[PECtrl.scala 111:17]
    io.NeuronBankIdx <= UInt<1>("h0") @[PECtrl.scala 112:20]
    io.NeuronBufRW <= UInt<1>("h0") @[PECtrl.scala 113:18]
    io.NeuronBufEn <= UInt<1>("h0") @[PECtrl.scala 114:18]
    io.NeuronIntraAddr <= UInt<1>("h0") @[PECtrl.scala 115:22]
    io.NeuronIntraRW <= UInt<1>("h0") @[PECtrl.scala 116:20]
    io.MacEnable <= UInt<1>("h0") @[PECtrl.scala 117:16]
    node _T_6 = eq(UInt<2>("h1"), stateReg) @[PECtrl.scala 118:20]
    when _T_6 : @[PECtrl.scala 118:20]
      io.KernelAddr <= UInt<1>("h0") @[PECtrl.scala 120:21]
      io.KernelBankIdx <= UInt<1>("h0") @[PECtrl.scala 121:24]
      io.KernelBufRW <= UInt<1>("h0") @[PECtrl.scala 122:22]
      io.KernelBufEn <= UInt<1>("h0") @[PECtrl.scala 123:22]
      io.KernelIntraAddr <= UInt<1>("h0") @[PECtrl.scala 124:26]
      io.KernelIntraRW <= UInt<1>("h0") @[PECtrl.scala 125:24]
      io.NeuronAddr <= UInt<1>("h0") @[PECtrl.scala 126:21]
      io.NeuronBankIdx <= UInt<1>("h0") @[PECtrl.scala 127:24]
      io.NeuronBufRW <= UInt<1>("h0") @[PECtrl.scala 128:22]
      io.NeuronBufEn <= UInt<1>("h0") @[PECtrl.scala 129:22]
      io.NeuronIntraAddr <= UInt<1>("h0") @[PECtrl.scala 130:26]
      io.NeuronIntraRW <= UInt<1>("h0") @[PECtrl.scala 131:24]
      KernelReadDone <= UInt<1>("h0") @[PECtrl.scala 132:22]
      NeuronReadDone <= UInt<1>("h0") @[PECtrl.scala 133:22]
      macDone <= UInt<1>("h0") @[PECtrl.scala 134:15]
    else :
      node _T_7 = eq(UInt<2>("h2"), stateReg) @[PECtrl.scala 118:20]
      when _T_7 : @[PECtrl.scala 118:20]
        io.KernelBufRW <= UInt<1>("h0") @[PECtrl.scala 137:22]
        io.KernelBufEn <= UInt<1>("h1") @[PECtrl.scala 138:22]
        io.KernelIntraRW <= UInt<1>("h1") @[PECtrl.scala 139:24]
        io.NeuronBufRW <= UInt<1>("h0") @[PECtrl.scala 140:22]
        io.NeuronBufEn <= UInt<1>("h1") @[PECtrl.scala 141:22]
        io.NeuronIntraRW <= UInt<1>("h1") @[PECtrl.scala 142:24]
        node _T_8 = eq(KernelReadDone, UInt<1>("h0")) @[PECtrl.scala 145:27]
        when _T_8 : @[PECtrl.scala 145:40]
          node _T_9 = lt(cntKBufAddr, KernelBoundary) @[PECtrl.scala 146:26]
          when _T_9 : @[PECtrl.scala 146:44]
            io.KernelAddr <= cntKBufAddr @[PECtrl.scala 147:25]
            io.KernelBankIdx <= cntKBufBank @[PECtrl.scala 148:28]
            io.KernelIntraAddr <= KernelSlotPtr @[PECtrl.scala 149:30]
            node _cntKBufAddr_T = add(cntKBufAddr, UInt<1>("h1")) @[PECtrl.scala 151:38]
            node _cntKBufAddr_T_1 = tail(_cntKBufAddr_T, 1) @[PECtrl.scala 151:38]
            cntKBufAddr <= _cntKBufAddr_T_1 @[PECtrl.scala 151:23]
          else :
            io.KernelAddr <= UInt<1>("h0") @[PECtrl.scala 153:25]
            node _io_KernelBankIdx_T = add(cntKBufBank, UInt<1>("h1")) @[PECtrl.scala 154:43]
            node _io_KernelBankIdx_T_1 = tail(_io_KernelBankIdx_T, 1) @[PECtrl.scala 154:43]
            io.KernelBankIdx <= _io_KernelBankIdx_T_1 @[PECtrl.scala 154:28]
            io.KernelIntraAddr <= KernelSlotPtr @[PECtrl.scala 155:30]
            cntKBufAddr <= UInt<1>("h0") @[PECtrl.scala 157:23]
            node _cntKBufBank_T = add(cntKBufBank, UInt<1>("h1")) @[PECtrl.scala 158:38]
            node _cntKBufBank_T_1 = tail(_cntKBufBank_T, 1) @[PECtrl.scala 158:38]
            cntKBufBank <= _cntKBufBank_T_1 @[PECtrl.scala 158:23]
          node _KernelSlotPtr_T = add(KernelSlotPtr, UInt<1>("h1")) @[PECtrl.scala 160:40]
          node _KernelSlotPtr_T_1 = tail(_KernelSlotPtr_T, 1) @[PECtrl.scala 160:40]
          KernelSlotPtr <= _KernelSlotPtr_T_1 @[PECtrl.scala 160:23]
          node _T_10 = mul(Ti, Tj) @[PECtrl.scala 163:35]
          node _T_11 = eq(KernelSlotPtr, _T_10) @[PECtrl.scala 163:28]
          when _T_11 : @[PECtrl.scala 163:41]
            KernelReadDone <= UInt<1>("h1") @[PECtrl.scala 165:26]
            KernelSlotPtr <= UInt<1>("h0") @[PECtrl.scala 166:25]
        node _T_12 = eq(NeuronReadDone, UInt<1>("h0")) @[PECtrl.scala 171:27]
        when _T_12 : @[PECtrl.scala 171:40]
          node _T_13 = lt(cntNBufAddr, NeuronBoundary) @[PECtrl.scala 172:26]
          when _T_13 : @[PECtrl.scala 172:44]
            io.NeuronAddr <= cntNBufAddr @[PECtrl.scala 173:25]
            io.NeuronBankIdx <= cntNBufBank @[PECtrl.scala 174:28]
            io.NeuronIntraAddr <= NeuronSlotPtr @[PECtrl.scala 175:30]
            node _cntNBufAddr_T = add(cntNBufAddr, UInt<1>("h1")) @[PECtrl.scala 177:38]
            node _cntNBufAddr_T_1 = tail(_cntNBufAddr_T, 1) @[PECtrl.scala 177:38]
            cntNBufAddr <= _cntNBufAddr_T_1 @[PECtrl.scala 177:23]
          NeuronSlotPtr <= cntNBufAddr @[PECtrl.scala 182:23]
          node _T_14 = eq(NeuronSlotPtr, NeuronBoundary) @[PECtrl.scala 183:28]
          when _T_14 : @[PECtrl.scala 183:48]
            NeuronReadDone <= UInt<1>("h1") @[PECtrl.scala 184:26]
            NeuronSlotPtr <= UInt<1>("h0") @[PECtrl.scala 185:25]
      else :
        node _T_15 = eq(UInt<2>("h3"), stateReg) @[PECtrl.scala 118:20]
        when _T_15 : @[PECtrl.scala 118:20]
          io.KernelBufEn <= UInt<1>("h0") @[PECtrl.scala 190:22]
          io.KernelIntraRW <= UInt<1>("h0") @[PECtrl.scala 191:24]
          io.MacEnable <= UInt<1>("h1") @[PECtrl.scala 192:20]
          node _T_16 = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 193:27]
          node _T_17 = tail(_T_16, 1) @[PECtrl.scala 193:27]
          node _T_18 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 193:49]
          node _T_19 = tail(_T_18, 1) @[PECtrl.scala 193:49]
          node _T_20 = mul(tc, _T_19) @[PECtrl.scala 193:43]
          node _T_21 = add(_T_17, _T_20) @[PECtrl.scala 193:38]
          node _T_22 = tail(_T_21, 1) @[PECtrl.scala 193:38]
          node _T_23 = lt(_T_22, Tj) @[PECtrl.scala 193:57]
          when _T_23 : @[PECtrl.scala 193:63]
            node _io_KernelIntraAddr_T = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 194:45]
            node _io_KernelIntraAddr_T_1 = tail(_io_KernelIntraAddr_T, 1) @[PECtrl.scala 194:45]
            node _io_KernelIntraAddr_T_2 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 194:67]
            node _io_KernelIntraAddr_T_3 = tail(_io_KernelIntraAddr_T_2, 1) @[PECtrl.scala 194:67]
            node _io_KernelIntraAddr_T_4 = mul(tc, _io_KernelIntraAddr_T_3) @[PECtrl.scala 194:61]
            node _io_KernelIntraAddr_T_5 = add(_io_KernelIntraAddr_T_1, _io_KernelIntraAddr_T_4) @[PECtrl.scala 194:56]
            node _io_KernelIntraAddr_T_6 = tail(_io_KernelIntraAddr_T_5, 1) @[PECtrl.scala 194:56]
            io.KernelIntraAddr <= _io_KernelIntraAddr_T_6 @[PECtrl.scala 194:28]
          else :
            node _io_KernelIntraAddr_T_7 = add(KernelSlotPtr, UInt<1>("h0")) @[PECtrl.scala 197:45]
            node _io_KernelIntraAddr_T_8 = tail(_io_KernelIntraAddr_T_7, 1) @[PECtrl.scala 197:45]
            node _io_KernelIntraAddr_T_9 = sub(Tj, UInt<1>("h1")) @[PECtrl.scala 197:67]
            node _io_KernelIntraAddr_T_10 = tail(_io_KernelIntraAddr_T_9, 1) @[PECtrl.scala 197:67]
            node _io_KernelIntraAddr_T_11 = mul(tc, _io_KernelIntraAddr_T_10) @[PECtrl.scala 197:61]
            node _io_KernelIntraAddr_T_12 = add(_io_KernelIntraAddr_T_8, _io_KernelIntraAddr_T_11) @[PECtrl.scala 197:56]
            node _io_KernelIntraAddr_T_13 = tail(_io_KernelIntraAddr_T_12, 1) @[PECtrl.scala 197:56]
            node _io_KernelIntraAddr_T_14 = sub(_io_KernelIntraAddr_T_13, Tj) @[PECtrl.scala 197:74]
            node _io_KernelIntraAddr_T_15 = tail(_io_KernelIntraAddr_T_14, 1) @[PECtrl.scala 197:74]
            io.KernelIntraAddr <= _io_KernelIntraAddr_T_15 @[PECtrl.scala 197:28]
          node _KernelSlotPtr_T_2 = add(io.KernelIntraAddr, Tr) @[PECtrl.scala 200:43]
          node _KernelSlotPtr_T_3 = tail(_KernelSlotPtr_T_2, 1) @[PECtrl.scala 200:43]
          KernelSlotPtr <= _KernelSlotPtr_T_3 @[PECtrl.scala 200:21]
          node _cntMac_T = add(cntMac, UInt<1>("h1")) @[PECtrl.scala 201:24]
          node _cntMac_T_1 = tail(_cntMac_T, 1) @[PECtrl.scala 201:24]
          cntMac <= _cntMac_T_1 @[PECtrl.scala 201:14]
          node _T_24 = mul(Ti, Tj) @[PECtrl.scala 203:26]
          node _T_25 = eq(cntMac, _T_24) @[PECtrl.scala 203:19]
          when _T_25 : @[PECtrl.scala 203:32]
            macDone <= UInt<1>("h1") @[PECtrl.scala 204:17]
            cntMac <= UInt<1>("h0") @[PECtrl.scala 205:16]

